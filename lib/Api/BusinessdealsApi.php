<?php
/**
 * BusinessdealsApi
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Boracomputer\ITScope\ApiException;
use Boracomputer\ITScope\Configuration;
use Boracomputer\ITScope\HeaderSelector;
use Boracomputer\ITScope\ObjectSerializer;

/**
 * BusinessdealsApi Class Doc Comment
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessdealsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveDeal
     *
     * Archive order
     *
     * @param  string $deal_id ITscope order ID (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveDeal($deal_id)
    {
        $this->archiveDealWithHttpInfo($deal_id);
    }

    /**
     * Operation archiveDealWithHttpInfo
     *
     * Archive order
     *
     * @param  string $deal_id ITscope order ID (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveDealWithHttpInfo($deal_id)
    {
        $returnType = '';
        $request = $this->archiveDealRequest($deal_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation archiveDealAsync
     *
     * Archive order
     *
     * @param  string $deal_id ITscope order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDealAsync($deal_id)
    {
        return $this->archiveDealAsyncWithHttpInfo($deal_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveDealAsyncWithHttpInfo
     *
     * Archive order
     *
     * @param  string $deal_id ITscope order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDealAsyncWithHttpInfo($deal_id)
    {
        $returnType = '';
        $request = $this->archiveDealRequest($deal_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveDeal'
     *
     * @param  string $deal_id ITscope order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveDealRequest($deal_id)
    {
        // verify the required parameter 'deal_id' is set
        if ($deal_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_id when calling archiveDeal'
            );
        }

        $resourcePath = '/business/deals/archive/{dealId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($deal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealId' . '}',
                ObjectSerializer::toPathValue($deal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDealByOrderId
     *
     * Fetch an order by the ITscope order ID
     *
     * @param  string $deal_id ITscope order ID (required)
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Deal[]
     */
    public function getDealByOrderId($deal_id, $view, $type)
    {
        list($response) = $this->getDealByOrderIdWithHttpInfo($deal_id, $view, $type);
        return $response;
    }

    /**
     * Operation getDealByOrderIdWithHttpInfo
     *
     * Fetch an order by the ITscope order ID
     *
     * @param  string $deal_id ITscope order ID (required)
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Deal[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDealByOrderIdWithHttpInfo($deal_id, $view, $type)
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->getDealByOrderIdRequest($deal_id, $view, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Deal[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDealByOrderIdAsync
     *
     * Fetch an order by the ITscope order ID
     *
     * @param  string $deal_id ITscope order ID (required)
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealByOrderIdAsync($deal_id, $view, $type)
    {
        return $this->getDealByOrderIdAsyncWithHttpInfo($deal_id, $view, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDealByOrderIdAsyncWithHttpInfo
     *
     * Fetch an order by the ITscope order ID
     *
     * @param  string $deal_id ITscope order ID (required)
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealByOrderIdAsyncWithHttpInfo($deal_id, $view, $type)
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->getDealByOrderIdRequest($deal_id, $view, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDealByOrderId'
     *
     * @param  string $deal_id ITscope order ID (required)
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDealByOrderIdRequest($deal_id, $view, $type)
    {
        // verify the required parameter 'deal_id' is set
        if ($deal_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deal_id when calling getDealByOrderId'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling getDealByOrderId'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getDealByOrderId'
            );
        }

        $resourcePath = '/business/deals/{dealId}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($deal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dealId' . '}',
                ObjectSerializer::toPathValue($deal_id),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json', 'text/xml'],
                ['application/xml', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDealList
     *
     * Fetch list of orders
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Deal[]
     */
    public function getDealList($view, $type, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        list($response) = $this->getDealListWithHttpInfo($view, $type, $archiv, $business_type, $sort, $page);
        return $response;
    }

    /**
     * Operation getDealListWithHttpInfo
     *
     * Fetch list of orders
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Deal[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDealListWithHttpInfo($view, $type, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->getDealListRequest($view, $type, $archiv, $business_type, $sort, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Deal[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDealListAsync
     *
     * Fetch list of orders
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealListAsync($view, $type, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        return $this->getDealListAsyncWithHttpInfo($view, $type, $archiv, $business_type, $sort, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDealListAsyncWithHttpInfo
     *
     * Fetch list of orders
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealListAsyncWithHttpInfo($view, $type, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->getDealListRequest($view, $type, $archiv, $business_type, $sort, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDealList'
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDealListRequest($view, $type, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling getDealList'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getDealList'
            );
        }

        $resourcePath = '/business/deals/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($archiv !== null) {
            $queryParams['archiv'] = ObjectSerializer::toQueryValue($archiv);
        }
        // query params
        if ($business_type !== null) {
            $queryParams['businessType'] = ObjectSerializer::toQueryValue($business_type);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newDeal
     *
     * Send a new order via ITscope
     *
     * @param  string $distributor_id ITscope distributor ID (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function newDeal($distributor_id)
    {
        $this->newDealWithHttpInfo($distributor_id);
    }

    /**
     * Operation newDealWithHttpInfo
     *
     * Send a new order via ITscope
     *
     * @param  string $distributor_id ITscope distributor ID (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function newDealWithHttpInfo($distributor_id)
    {
        $returnType = '';
        $request = $this->newDealRequest($distributor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation newDealAsync
     *
     * Send a new order via ITscope
     *
     * @param  string $distributor_id ITscope distributor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newDealAsync($distributor_id)
    {
        return $this->newDealAsyncWithHttpInfo($distributor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newDealAsyncWithHttpInfo
     *
     * Send a new order via ITscope
     *
     * @param  string $distributor_id ITscope distributor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newDealAsyncWithHttpInfo($distributor_id)
    {
        $returnType = '';
        $request = $this->newDealRequest($distributor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newDeal'
     *
     * @param  string $distributor_id ITscope distributor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function newDealRequest($distributor_id)
    {
        // verify the required parameter 'distributor_id' is set
        if ($distributor_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distributor_id when calling newDeal'
            );
        }

        $resourcePath = '/business/deals/send/{distributorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($distributor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'distributorId' . '}',
                ObjectSerializer::toPathValue($distributor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'text/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDeals
     *
     * Search orders with filters
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $filter Possible criteria are keywords, dealId, customerDealId, cartId e.g. dealId&#x3D;11SRRK-150126-1136. (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Deal[]
     */
    public function searchDeals($view, $type, $filter, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        list($response) = $this->searchDealsWithHttpInfo($view, $type, $filter, $archiv, $business_type, $sort, $page);
        return $response;
    }

    /**
     * Operation searchDealsWithHttpInfo
     *
     * Search orders with filters
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $filter Possible criteria are keywords, dealId, customerDealId, cartId e.g. dealId&#x3D;11SRRK-150126-1136. (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Deal[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDealsWithHttpInfo($view, $type, $filter, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->searchDealsRequest($view, $type, $filter, $archiv, $business_type, $sort, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Deal[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDealsAsync
     *
     * Search orders with filters
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $filter Possible criteria are keywords, dealId, customerDealId, cartId e.g. dealId&#x3D;11SRRK-150126-1136. (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDealsAsync($view, $type, $filter, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        return $this->searchDealsAsyncWithHttpInfo($view, $type, $filter, $archiv, $business_type, $sort, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDealsAsyncWithHttpInfo
     *
     * Search orders with filters
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $filter Possible criteria are keywords, dealId, customerDealId, cartId e.g. dealId&#x3D;11SRRK-150126-1136. (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDealsAsyncWithHttpInfo($view, $type, $filter, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        $returnType = '\Boracomputer\ITScope\Model\Deal[]';
        $request = $this->searchDealsRequest($view, $type, $filter, $archiv, $business_type, $sort, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDeals'
     *
     * @param  string $view View (document) (required)
     * @param  string $type Output data format (required)
     * @param  string $filter Possible criteria are keywords, dealId, customerDealId, cartId e.g. dealId&#x3D;11SRRK-150126-1136. (required)
     * @param  string $archiv Filter for the archive flag: ARCHIVED: archived, NOTARCHIVED: not archived and ALL: All orders (optional, default to ALL)
     * @param  string $business_type Filter for the business type: PURCHASE: outgoing deals, for sellers - SALE: ingoing deals, for resellers (optional, default to PURCHASE)
     * @param  string $sort Sort the received orders (optional, default to LAST_MODIFIED)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchDealsRequest($view, $type, $filter, $archiv = 'ALL', $business_type = 'PURCHASE', $sort = 'LAST_MODIFIED', $page = '1')
    {
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling searchDeals'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling searchDeals'
            );
        }
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling searchDeals'
            );
        }

        $resourcePath = '/business/deals/search/{filter}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($archiv !== null) {
            $queryParams['archiv'] = ObjectSerializer::toQueryValue($archiv);
        }
        // query params
        if ($business_type !== null) {
            $queryParams['businessType'] = ObjectSerializer::toQueryValue($business_type);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($filter !== null) {
            $resourcePath = str_replace(
                '{' . 'filter' . '}',
                ObjectSerializer::toPathValue($filter),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
