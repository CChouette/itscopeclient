<?php
/**
 * ProductsApi
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Boracomputer\ITScope\ApiException;
use Boracomputer\ITScope\Configuration;
use Boracomputer\ITScope\HeaderSelector;
use Boracomputer\ITScope\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation export
     *
     * Download an export
     *
     * @param  string $uuid ID of the export which should be fetched (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function export($uuid)
    {
        $this->exportWithHttpInfo($uuid);
    }

    /**
     * Operation exportWithHttpInfo
     *
     * Download an export
     *
     * @param  string $uuid ID of the export which should be fetched (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->exportRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation exportAsync
     *
     * Download an export
     *
     * @param  string $uuid ID of the export which should be fetched (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsync($uuid)
    {
        return $this->exportAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportAsyncWithHttpInfo
     *
     * Download an export
     *
     * @param  string $uuid ID of the export which should be fetched (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsyncWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->exportRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'export'
     *
     * @param  string $uuid ID of the export which should be fetched (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling export'
            );
        }

        $resourcePath = '/products/exports/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryDatasheetById
     *
     * Fetch datasheet by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $view View (scope of data) (required)
     * @param  string $type Output data format (required)
     * @param  string $language Datasheet language (optional, default to )
     * @param  string $accept_language Header parameter for the datasheet language (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function queryDatasheetById($itscopeid, $view, $type, $language = '', $accept_language = 'de')
    {
        $this->queryDatasheetByIdWithHttpInfo($itscopeid, $view, $type, $language, $accept_language);
    }

    /**
     * Operation queryDatasheetByIdWithHttpInfo
     *
     * Fetch datasheet by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $view View (scope of data) (required)
     * @param  string $type Output data format (required)
     * @param  string $language Datasheet language (optional, default to )
     * @param  string $accept_language Header parameter for the datasheet language (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryDatasheetByIdWithHttpInfo($itscopeid, $view, $type, $language = '', $accept_language = 'de')
    {
        $returnType = '';
        $request = $this->queryDatasheetByIdRequest($itscopeid, $view, $type, $language, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation queryDatasheetByIdAsync
     *
     * Fetch datasheet by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $view View (scope of data) (required)
     * @param  string $type Output data format (required)
     * @param  string $language Datasheet language (optional, default to )
     * @param  string $accept_language Header parameter for the datasheet language (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryDatasheetByIdAsync($itscopeid, $view, $type, $language = '', $accept_language = 'de')
    {
        return $this->queryDatasheetByIdAsyncWithHttpInfo($itscopeid, $view, $type, $language, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryDatasheetByIdAsyncWithHttpInfo
     *
     * Fetch datasheet by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $view View (scope of data) (required)
     * @param  string $type Output data format (required)
     * @param  string $language Datasheet language (optional, default to )
     * @param  string $accept_language Header parameter for the datasheet language (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryDatasheetByIdAsyncWithHttpInfo($itscopeid, $view, $type, $language = '', $accept_language = 'de')
    {
        $returnType = '';
        $request = $this->queryDatasheetByIdRequest($itscopeid, $view, $type, $language, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryDatasheetById'
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $view View (scope of data) (required)
     * @param  string $type Output data format (required)
     * @param  string $language Datasheet language (optional, default to )
     * @param  string $accept_language Header parameter for the datasheet language (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryDatasheetByIdRequest($itscopeid, $view, $type, $language = '', $accept_language = 'de')
    {
        // verify the required parameter 'itscopeid' is set
        if ($itscopeid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itscopeid when calling queryDatasheetById'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling queryDatasheetById'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling queryDatasheetById'
            );
        }

        $resourcePath = '/products/datasheet/id/{itscopeid}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($itscopeid !== null) {
            $resourcePath = str_replace(
                '{' . 'itscopeid' . '}',
                ObjectSerializer::toPathValue($itscopeid),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/html', 'application/zip', 'application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html', 'application/zip', 'application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProductByEan
     *
     * Fetch product by EAN
     *
     * @param  string $ean EAN or UPC, example: 0885909565573 (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Product[]
     */
    public function queryProductByEan($ean, $type, $view, $realtime = 'false', $plzproducts = 'false', $accept_language = 'de')
    {
        list($response) = $this->queryProductByEanWithHttpInfo($ean, $type, $view, $realtime, $plzproducts, $accept_language);
        return $response;
    }

    /**
     * Operation queryProductByEanWithHttpInfo
     *
     * Fetch product by EAN
     *
     * @param  string $ean EAN or UPC, example: 0885909565573 (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProductByEanWithHttpInfo($ean, $type, $view, $realtime = 'false', $plzproducts = 'false', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductByEanRequest($ean, $type, $view, $realtime, $plzproducts, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProductByEanAsync
     *
     * Fetch product by EAN
     *
     * @param  string $ean EAN or UPC, example: 0885909565573 (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductByEanAsync($ean, $type, $view, $realtime = 'false', $plzproducts = 'false', $accept_language = 'de')
    {
        return $this->queryProductByEanAsyncWithHttpInfo($ean, $type, $view, $realtime, $plzproducts, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProductByEanAsyncWithHttpInfo
     *
     * Fetch product by EAN
     *
     * @param  string $ean EAN or UPC, example: 0885909565573 (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductByEanAsyncWithHttpInfo($ean, $type, $view, $realtime = 'false', $plzproducts = 'false', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductByEanRequest($ean, $type, $view, $realtime, $plzproducts, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProductByEan'
     *
     * @param  string $ean EAN or UPC, example: 0885909565573 (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProductByEanRequest($ean, $type, $view, $realtime = 'false', $plzproducts = 'false', $accept_language = 'de')
    {
        // verify the required parameter 'ean' is set
        if ($ean === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling queryProductByEan'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling queryProductByEan'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling queryProductByEan'
            );
        }

        $resourcePath = '/products/ean/{ean}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($realtime !== null) {
            $queryParams['realtime'] = ObjectSerializer::toQueryValue($realtime);
        }
        // query params
        if ($plzproducts !== null) {
            $queryParams['plzproducts'] = ObjectSerializer::toQueryValue($plzproducts);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json', 'text/csv', 'text/html', 'application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json', 'text/csv', 'text/html', 'application/zip'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProductById
     *
     * Fetch product by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Product[]
     */
    public function queryProductById($itscopeid, $type, $view, $realtime = 'false', $accept_language = 'de')
    {
        list($response) = $this->queryProductByIdWithHttpInfo($itscopeid, $type, $view, $realtime, $accept_language);
        return $response;
    }

    /**
     * Operation queryProductByIdWithHttpInfo
     *
     * Fetch product by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProductByIdWithHttpInfo($itscopeid, $type, $view, $realtime = 'false', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductByIdRequest($itscopeid, $type, $view, $realtime, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProductByIdAsync
     *
     * Fetch product by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductByIdAsync($itscopeid, $type, $view, $realtime = 'false', $accept_language = 'de')
    {
        return $this->queryProductByIdAsyncWithHttpInfo($itscopeid, $type, $view, $realtime, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProductByIdAsyncWithHttpInfo
     *
     * Fetch product by ID
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductByIdAsyncWithHttpInfo($itscopeid, $type, $view, $realtime = 'false', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductByIdRequest($itscopeid, $type, $view, $realtime, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProductById'
     *
     * @param  string $itscopeid ITscope PUID (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProductByIdRequest($itscopeid, $type, $view, $realtime = 'false', $accept_language = 'de')
    {
        // verify the required parameter 'itscopeid' is set
        if ($itscopeid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itscopeid when calling queryProductById'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling queryProductById'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling queryProductById'
            );
        }

        $resourcePath = '/products/id/{itscopeid}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($realtime !== null) {
            $queryParams['realtime'] = ObjectSerializer::toQueryValue($realtime);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($itscopeid !== null) {
            $resourcePath = str_replace(
                '{' . 'itscopeid' . '}',
                ObjectSerializer::toPathValue($itscopeid),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json', 'application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json', 'application/zip'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProductTypes
     *
     * List of all product types
     *
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\ProductType[]
     */
    public function queryProductTypes($type, $view)
    {
        list($response) = $this->queryProductTypesWithHttpInfo($type, $view);
        return $response;
    }

    /**
     * Operation queryProductTypesWithHttpInfo
     *
     * List of all product types
     *
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\ProductType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProductTypesWithHttpInfo($type, $view)
    {
        $returnType = '\Boracomputer\ITScope\Model\ProductType[]';
        $request = $this->queryProductTypesRequest($type, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\ProductType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProductTypesAsync
     *
     * List of all product types
     *
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductTypesAsync($type, $view)
    {
        return $this->queryProductTypesAsyncWithHttpInfo($type, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProductTypesAsyncWithHttpInfo
     *
     * List of all product types
     *
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductTypesAsyncWithHttpInfo($type, $view)
    {
        $returnType = '\Boracomputer\ITScope\Model\ProductType[]';
        $request = $this->queryProductTypesRequest($type, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProductTypes'
     *
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProductTypesRequest($type, $view)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling queryProductTypes'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling queryProductTypes'
            );
        }

        $resourcePath = '/products/producttypes/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProducts
     *
     * Search products by filter
     *
     * @param  string $filter One or more filter criteria separated by semicolon (AND-search). Within a criteria values can be separated by comma (OR). Possible criteria are ean&#x3D;0885909565573, distpid&#x3D;C194570, id&#x3D;2367755000, keywords&#x3D;Apple%20Ipad, producttype etc &lt;br&gt; More at the &lt;a href&#x3D;\&quot;https://support.itscope.com/hc/de/articles/206012542\&quot;&gt;Online Help&lt;/a&gt; (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     * @param  int $item (Not yet implemented) Chooses a single product from the result set and returns only that. (optional, default to 0)
     * @param  string $sort Sort the results (optional, default to DEFAULT)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Boracomputer\ITScope\Model\Product[]
     */
    public function queryProducts($filter, $type, $view, $realtime = 'false', $plzproducts = 'false', $page = '1', $item = '0', $sort = 'DEFAULT', $accept_language = 'de')
    {
        list($response) = $this->queryProductsWithHttpInfo($filter, $type, $view, $realtime, $plzproducts, $page, $item, $sort, $accept_language);
        return $response;
    }

    /**
     * Operation queryProductsWithHttpInfo
     *
     * Search products by filter
     *
     * @param  string $filter One or more filter criteria separated by semicolon (AND-search). Within a criteria values can be separated by comma (OR). Possible criteria are ean&#x3D;0885909565573, distpid&#x3D;C194570, id&#x3D;2367755000, keywords&#x3D;Apple%20Ipad, producttype etc &lt;br&gt; More at the &lt;a href&#x3D;\&quot;https://support.itscope.com/hc/de/articles/206012542\&quot;&gt;Online Help&lt;/a&gt; (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     * @param  int $item (Not yet implemented) Chooses a single product from the result set and returns only that. (optional, default to 0)
     * @param  string $sort Sort the results (optional, default to DEFAULT)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \Boracomputer\ITScope\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Boracomputer\ITScope\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProductsWithHttpInfo($filter, $type, $view, $realtime = 'false', $plzproducts = 'false', $page = '1', $item = '0', $sort = 'DEFAULT', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductsRequest($filter, $type, $view, $realtime, $plzproducts, $page, $item, $sort, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Boracomputer\ITScope\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProductsAsync
     *
     * Search products by filter
     *
     * @param  string $filter One or more filter criteria separated by semicolon (AND-search). Within a criteria values can be separated by comma (OR). Possible criteria are ean&#x3D;0885909565573, distpid&#x3D;C194570, id&#x3D;2367755000, keywords&#x3D;Apple%20Ipad, producttype etc &lt;br&gt; More at the &lt;a href&#x3D;\&quot;https://support.itscope.com/hc/de/articles/206012542\&quot;&gt;Online Help&lt;/a&gt; (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     * @param  int $item (Not yet implemented) Chooses a single product from the result set and returns only that. (optional, default to 0)
     * @param  string $sort Sort the results (optional, default to DEFAULT)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductsAsync($filter, $type, $view, $realtime = 'false', $plzproducts = 'false', $page = '1', $item = '0', $sort = 'DEFAULT', $accept_language = 'de')
    {
        return $this->queryProductsAsyncWithHttpInfo($filter, $type, $view, $realtime, $plzproducts, $page, $item, $sort, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProductsAsyncWithHttpInfo
     *
     * Search products by filter
     *
     * @param  string $filter One or more filter criteria separated by semicolon (AND-search). Within a criteria values can be separated by comma (OR). Possible criteria are ean&#x3D;0885909565573, distpid&#x3D;C194570, id&#x3D;2367755000, keywords&#x3D;Apple%20Ipad, producttype etc &lt;br&gt; More at the &lt;a href&#x3D;\&quot;https://support.itscope.com/hc/de/articles/206012542\&quot;&gt;Online Help&lt;/a&gt; (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     * @param  int $item (Not yet implemented) Chooses a single product from the result set and returns only that. (optional, default to 0)
     * @param  string $sort Sort the results (optional, default to DEFAULT)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProductsAsyncWithHttpInfo($filter, $type, $view, $realtime = 'false', $plzproducts = 'false', $page = '1', $item = '0', $sort = 'DEFAULT', $accept_language = 'de')
    {
        $returnType = '\Boracomputer\ITScope\Model\Product[]';
        $request = $this->queryProductsRequest($filter, $type, $view, $realtime, $plzproducts, $page, $item, $sort, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProducts'
     *
     * @param  string $filter One or more filter criteria separated by semicolon (AND-search). Within a criteria values can be separated by comma (OR). Possible criteria are ean&#x3D;0885909565573, distpid&#x3D;C194570, id&#x3D;2367755000, keywords&#x3D;Apple%20Ipad, producttype etc &lt;br&gt; More at the &lt;a href&#x3D;\&quot;https://support.itscope.com/hc/de/articles/206012542\&quot;&gt;Online Help&lt;/a&gt; (required)
     * @param  string $type Output data format (required)
     * @param  string $view View (scope of data) (required)
     * @param  bool $realtime Realtime request for all prices (optional, default to false)
     * @param  bool $plzproducts Items ending with -999, products without ITscope catalogue ID (optional, default to false)
     * @param  int $page Large result sets are bundled in multiple pages with 50 results per page. (optional, default to 1)
     * @param  int $item (Not yet implemented) Chooses a single product from the result set and returns only that. (optional, default to 0)
     * @param  string $sort Sort the results (optional, default to DEFAULT)
     * @param  string $accept_language Languages of the product content, comma separated (de,en,fr,nl,it,es) (optional, default to de)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProductsRequest($filter, $type, $view, $realtime = 'false', $plzproducts = 'false', $page = '1', $item = '0', $sort = 'DEFAULT', $accept_language = 'de')
    {
        // verify the required parameter 'filter' is set
        if ($filter === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling queryProducts'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling queryProducts'
            );
        }
        // verify the required parameter 'view' is set
        if ($view === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $view when calling queryProducts'
            );
        }

        $resourcePath = '/products/search/{filter}/{view}.{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($realtime !== null) {
            $queryParams['realtime'] = ObjectSerializer::toQueryValue($realtime);
        }
        // query params
        if ($plzproducts !== null) {
            $queryParams['plzproducts'] = ObjectSerializer::toQueryValue($plzproducts);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($item !== null) {
            $queryParams['item'] = ObjectSerializer::toQueryValue($item);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($filter !== null) {
            $resourcePath = str_replace(
                '{' . 'filter' . '}',
                ObjectSerializer::toPathValue($filter),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($view !== null) {
            $resourcePath = str_replace(
                '{' . 'view' . '}',
                ObjectSerializer::toPathValue($view),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json', 'text/csv', 'text/html', 'application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json', 'text/csv', 'text/html', 'application/zip'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
