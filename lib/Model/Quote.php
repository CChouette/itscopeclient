<?php
/**
 * Quote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Quote Class Doc Comment
 *
 * @category Class
 * @description Detailinformationen zu einem Angebot
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Quote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'quote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quote_id' => 'string',
        'quote_no' => 'string',
        'short_url' => 'string',
        'name' => 'string',
        'status' => 'string',
        'last_modified' => '\DateTime',
        'valid_until' => '\DateTime',
        'organisation' => 'string',
        'person' => 'string',
        'item_count' => 'int',
        'document_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quote_id' => null,
        'quote_no' => null,
        'short_url' => null,
        'name' => null,
        'status' => null,
        'last_modified' => 'date-time',
        'valid_until' => 'date-time',
        'organisation' => null,
        'person' => null,
        'item_count' => 'int32',
        'document_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quote_id' => 'quoteId',
        'quote_no' => 'quoteNo',
        'short_url' => 'shortUrl',
        'name' => 'name',
        'status' => 'status',
        'last_modified' => 'lastModified',
        'valid_until' => 'validUntil',
        'organisation' => 'organisation',
        'person' => 'person',
        'item_count' => 'itemCount',
        'document_url' => 'documentUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quote_id' => 'setQuoteId',
        'quote_no' => 'setQuoteNo',
        'short_url' => 'setShortUrl',
        'name' => 'setName',
        'status' => 'setStatus',
        'last_modified' => 'setLastModified',
        'valid_until' => 'setValidUntil',
        'organisation' => 'setOrganisation',
        'person' => 'setPerson',
        'item_count' => 'setItemCount',
        'document_url' => 'setDocumentUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quote_id' => 'getQuoteId',
        'quote_no' => 'getQuoteNo',
        'short_url' => 'getShortUrl',
        'name' => 'getName',
        'status' => 'getStatus',
        'last_modified' => 'getLastModified',
        'valid_until' => 'getValidUntil',
        'organisation' => 'getOrganisation',
        'person' => 'getPerson',
        'item_count' => 'getItemCount',
        'document_url' => 'getDocumentUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quote_id'] = isset($data['quote_id']) ? $data['quote_id'] : null;
        $this->container['quote_no'] = isset($data['quote_no']) ? $data['quote_no'] : null;
        $this->container['short_url'] = isset($data['short_url']) ? $data['short_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['organisation'] = isset($data['organisation']) ? $data['organisation'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['item_count'] = isset($data['item_count']) ? $data['item_count'] : null;
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['quote_id']) && (strlen($this->container['quote_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'quote_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['quote_id']) && (strlen($this->container['quote_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'quote_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quote_no']) && (strlen($this->container['quote_no']) > 255)) {
            $invalidProperties[] = "invalid value for 'quote_no', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['quote_no']) && (strlen($this->container['quote_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'quote_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['short_url']) && (strlen($this->container['short_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'short_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['short_url']) && (strlen($this->container['short_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'short_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['status']) && (strlen($this->container['status']) > 255)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['status']) && (strlen($this->container['status']) < 0)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['organisation']) && (strlen($this->container['organisation']) > 255)) {
            $invalidProperties[] = "invalid value for 'organisation', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['organisation']) && (strlen($this->container['organisation']) < 0)) {
            $invalidProperties[] = "invalid value for 'organisation', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['person']) && (strlen($this->container['person']) > 511)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be smaller than or equal to 511.";
        }

        if (!is_null($this->container['person']) && (strlen($this->container['person']) < 0)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['document_url']) && (strlen($this->container['document_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'document_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['document_url']) && (strlen($this->container['document_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['quote_id']) > 36) {
            return false;
        }
        if (strlen($this->container['quote_id']) < 0) {
            return false;
        }
        if (strlen($this->container['quote_no']) > 255) {
            return false;
        }
        if (strlen($this->container['quote_no']) < 0) {
            return false;
        }
        if (strlen($this->container['short_url']) > 2048) {
            return false;
        }
        if (strlen($this->container['short_url']) < 0) {
            return false;
        }
        if (strlen($this->container['name']) > 255) {
            return false;
        }
        if (strlen($this->container['name']) < 0) {
            return false;
        }
        if (strlen($this->container['status']) > 255) {
            return false;
        }
        if (strlen($this->container['status']) < 0) {
            return false;
        }
        if (strlen($this->container['organisation']) > 255) {
            return false;
        }
        if (strlen($this->container['organisation']) < 0) {
            return false;
        }
        if (strlen($this->container['person']) > 511) {
            return false;
        }
        if (strlen($this->container['person']) < 0) {
            return false;
        }
        if (strlen($this->container['document_url']) > 255) {
            return false;
        }
        if (strlen($this->container['document_url']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets quote_id
     *
     * @return string
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param string $quote_id Eindeutiger Key des Angebots (intern)
     *
     * @return $this
     */
    public function setQuoteId($quote_id)
    {
        if (!is_null($quote_id) && (strlen($quote_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $quote_id when calling Quote., must be smaller than or equal to 36.');
        }
        if (!is_null($quote_id) && (strlen($quote_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $quote_id when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets quote_no
     *
     * @return string
     */
    public function getQuoteNo()
    {
        return $this->container['quote_no'];
    }

    /**
     * Sets quote_no
     *
     * @param string $quote_no Angebotsnummer, wie sie auf dem Dokument angezeigt wird
     *
     * @return $this
     */
    public function setQuoteNo($quote_no)
    {
        if (!is_null($quote_no) && (strlen($quote_no) > 255)) {
            throw new \InvalidArgumentException('invalid length for $quote_no when calling Quote., must be smaller than or equal to 255.');
        }
        if (!is_null($quote_no) && (strlen($quote_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $quote_no when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['quote_no'] = $quote_no;

        return $this;
    }

    /**
     * Gets short_url
     *
     * @return string
     */
    public function getShortUrl()
    {
        return $this->container['short_url'];
    }

    /**
     * Sets short_url
     *
     * @param string $short_url Individueller Link auf das Angebot, für den Empfänger des Angebots
     *
     * @return $this
     */
    public function setShortUrl($short_url)
    {
        if (!is_null($short_url) && (strlen($short_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $short_url when calling Quote., must be smaller than or equal to 2048.');
        }
        if (!is_null($short_url) && (strlen($short_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $short_url when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['short_url'] = $short_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Vom Ersteller des Angebots vergebener Name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Quote., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Zustand des Angebots, z.B. \"In Verhandlung\"
     *
     * @return $this
     */
    public function setStatus($status)
    {
        if (!is_null($status) && (strlen($status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Quote., must be smaller than or equal to 255.');
        }
        if (!is_null($status) && (strlen($status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified Letztes Änderungsdatum
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until Gültigkeitsdatum, bis zu welchem das Angebot gilt
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string $organisation Name der Organisation, an die das Angebot gerichtet ist
     *
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        if (!is_null($organisation) && (strlen($organisation) > 255)) {
            throw new \InvalidArgumentException('invalid length for $organisation when calling Quote., must be smaller than or equal to 255.');
        }
        if (!is_null($organisation) && (strlen($organisation) < 0)) {
            throw new \InvalidArgumentException('invalid length for $organisation when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string $person Name des Empfängers (Vor- und Nachname)
     *
     * @return $this
     */
    public function setPerson($person)
    {
        if (!is_null($person) && (strlen($person) > 511)) {
            throw new \InvalidArgumentException('invalid length for $person when calling Quote., must be smaller than or equal to 511.');
        }
        if (!is_null($person) && (strlen($person) < 0)) {
            throw new \InvalidArgumentException('invalid length for $person when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets item_count
     *
     * @return int
     */
    public function getItemCount()
    {
        return $this->container['item_count'];
    }

    /**
     * Sets item_count
     *
     * @param int $item_count Anzahl der Positionen im Angebot (inklusive optionalen Positionen)
     *
     * @return $this
     */
    public function setItemCount($item_count)
    {
        $this->container['item_count'] = $item_count;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string $document_url <a href=\"https://support.itscope.com/hc/de/articles/207934765\">API Business Dokumente Url</a> für den Download des Dokuments.
     *
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        if (!is_null($document_url) && (strlen($document_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $document_url when calling Quote., must be smaller than or equal to 255.');
        }
        if (!is_null($document_url) && (strlen($document_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_url when calling Quote., must be bigger than or equal to 0.');
        }

        $this->container['document_url'] = $document_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


