<?php
/**
 * ProductType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductType Class Doc Comment
 *
 * @category Class
 * @description Typ eines Produkts, z.B. Server, Prozessor.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'productType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'product_type_group' => '\Swagger\Client\Model\ProductTypeGroup',
        'name' => 'string',
        'attribute_type_id1' => 'int',
        'attribute_type_name1' => 'string',
        'attribute_type_id2' => 'int',
        'attribute_type_name2' => 'string',
        'attribute_type_id3' => 'int',
        'attribute_type_name3' => 'string',
        'attribute_type_id4' => 'int',
        'attribute_type_name4' => 'string',
        'attribute_type_id5' => 'int',
        'attribute_type_name5' => 'string',
        'attribute_type' => '\Swagger\Client\Model\AttributeType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'product_type_group' => null,
        'name' => null,
        'attribute_type_id1' => 'int64',
        'attribute_type_name1' => null,
        'attribute_type_id2' => 'int64',
        'attribute_type_name2' => null,
        'attribute_type_id3' => 'int64',
        'attribute_type_name3' => null,
        'attribute_type_id4' => 'int64',
        'attribute_type_name4' => null,
        'attribute_type_id5' => 'int64',
        'attribute_type_name5' => null,
        'attribute_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_type_group' => 'productTypeGroup',
        'name' => 'name',
        'attribute_type_id1' => 'attributeTypeId1',
        'attribute_type_name1' => 'attributeTypeName1',
        'attribute_type_id2' => 'attributeTypeId2',
        'attribute_type_name2' => 'attributeTypeName2',
        'attribute_type_id3' => 'attributeTypeId3',
        'attribute_type_name3' => 'attributeTypeName3',
        'attribute_type_id4' => 'attributeTypeId4',
        'attribute_type_name4' => 'attributeTypeName4',
        'attribute_type_id5' => 'attributeTypeId5',
        'attribute_type_name5' => 'attributeTypeName5',
        'attribute_type' => 'attributeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_type_group' => 'setProductTypeGroup',
        'name' => 'setName',
        'attribute_type_id1' => 'setAttributeTypeId1',
        'attribute_type_name1' => 'setAttributeTypeName1',
        'attribute_type_id2' => 'setAttributeTypeId2',
        'attribute_type_name2' => 'setAttributeTypeName2',
        'attribute_type_id3' => 'setAttributeTypeId3',
        'attribute_type_name3' => 'setAttributeTypeName3',
        'attribute_type_id4' => 'setAttributeTypeId4',
        'attribute_type_name4' => 'setAttributeTypeName4',
        'attribute_type_id5' => 'setAttributeTypeId5',
        'attribute_type_name5' => 'setAttributeTypeName5',
        'attribute_type' => 'setAttributeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_type_group' => 'getProductTypeGroup',
        'name' => 'getName',
        'attribute_type_id1' => 'getAttributeTypeId1',
        'attribute_type_name1' => 'getAttributeTypeName1',
        'attribute_type_id2' => 'getAttributeTypeId2',
        'attribute_type_name2' => 'getAttributeTypeName2',
        'attribute_type_id3' => 'getAttributeTypeId3',
        'attribute_type_name3' => 'getAttributeTypeName3',
        'attribute_type_id4' => 'getAttributeTypeId4',
        'attribute_type_name4' => 'getAttributeTypeName4',
        'attribute_type_id5' => 'getAttributeTypeId5',
        'attribute_type_name5' => 'getAttributeTypeName5',
        'attribute_type' => 'getAttributeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product_type_group'] = isset($data['product_type_group']) ? $data['product_type_group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['attribute_type_id1'] = isset($data['attribute_type_id1']) ? $data['attribute_type_id1'] : null;
        $this->container['attribute_type_name1'] = isset($data['attribute_type_name1']) ? $data['attribute_type_name1'] : null;
        $this->container['attribute_type_id2'] = isset($data['attribute_type_id2']) ? $data['attribute_type_id2'] : null;
        $this->container['attribute_type_name2'] = isset($data['attribute_type_name2']) ? $data['attribute_type_name2'] : null;
        $this->container['attribute_type_id3'] = isset($data['attribute_type_id3']) ? $data['attribute_type_id3'] : null;
        $this->container['attribute_type_name3'] = isset($data['attribute_type_name3']) ? $data['attribute_type_name3'] : null;
        $this->container['attribute_type_id4'] = isset($data['attribute_type_id4']) ? $data['attribute_type_id4'] : null;
        $this->container['attribute_type_name4'] = isset($data['attribute_type_name4']) ? $data['attribute_type_name4'] : null;
        $this->container['attribute_type_id5'] = isset($data['attribute_type_id5']) ? $data['attribute_type_id5'] : null;
        $this->container['attribute_type_name5'] = isset($data['attribute_type_name5']) ? $data['attribute_type_name5'] : null;
        $this->container['attribute_type'] = isset($data['attribute_type']) ? $data['attribute_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['product_type_group'] === null) {
            $invalidProperties[] = "'product_type_group' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name1']) && (strlen($this->container['attribute_type_name1']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name1']) && (strlen($this->container['attribute_type_name1']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name2']) && (strlen($this->container['attribute_type_name2']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name2']) && (strlen($this->container['attribute_type_name2']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name3']) && (strlen($this->container['attribute_type_name3']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name3', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name3']) && (strlen($this->container['attribute_type_name3']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name4']) && (strlen($this->container['attribute_type_name4']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name4', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name4']) && (strlen($this->container['attribute_type_name4']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name4', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name5']) && (strlen($this->container['attribute_type_name5']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name5', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name5']) && (strlen($this->container['attribute_type_name5']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name5', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['product_type_group'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 255) {
            return false;
        }
        if (strlen($this->container['name']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name1']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name1']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name2']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name2']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name3']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name3']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name4']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name4']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name5']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name5']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Eindeutiger Key
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_type_group
     *
     * @return \Swagger\Client\Model\ProductTypeGroup
     */
    public function getProductTypeGroup()
    {
        return $this->container['product_type_group'];
    }

    /**
     * Sets product_type_group
     *
     * @param \Swagger\Client\Model\ProductTypeGroup $product_type_group Referenz auf Produkttyp-Gruppe (ProductTypeGroup.id, n:1)
     *
     * @return $this
     */
    public function setProductTypeGroup($product_type_group)
    {
        $this->container['product_type_group'] = $product_type_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Bezeichner des Produkttyps. Kann als 2. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductType., must be smaller than or equal to 255.');
        }
        if ((strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attribute_type_id1
     *
     * @return int
     */
    public function getAttributeTypeId1()
    {
        return $this->container['attribute_type_id1'];
    }

    /**
     * Sets attribute_type_id1
     *
     * @param int $attribute_type_id1 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId1($attribute_type_id1)
    {
        $this->container['attribute_type_id1'] = $attribute_type_id1;

        return $this;
    }

    /**
     * Gets attribute_type_name1
     *
     * @return string
     */
    public function getAttributeTypeName1()
    {
        return $this->container['attribute_type_name1'];
    }

    /**
     * Sets attribute_type_name1
     *
     * @param string $attribute_type_name1 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName1($attribute_type_name1)
    {
        if (!is_null($attribute_type_name1) && (strlen($attribute_type_name1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name1 when calling ProductType., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name1) && (strlen($attribute_type_name1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name1 when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name1'] = $attribute_type_name1;

        return $this;
    }

    /**
     * Gets attribute_type_id2
     *
     * @return int
     */
    public function getAttributeTypeId2()
    {
        return $this->container['attribute_type_id2'];
    }

    /**
     * Sets attribute_type_id2
     *
     * @param int $attribute_type_id2 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId2($attribute_type_id2)
    {
        $this->container['attribute_type_id2'] = $attribute_type_id2;

        return $this;
    }

    /**
     * Gets attribute_type_name2
     *
     * @return string
     */
    public function getAttributeTypeName2()
    {
        return $this->container['attribute_type_name2'];
    }

    /**
     * Sets attribute_type_name2
     *
     * @param string $attribute_type_name2 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName2($attribute_type_name2)
    {
        if (!is_null($attribute_type_name2) && (strlen($attribute_type_name2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name2 when calling ProductType., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name2) && (strlen($attribute_type_name2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name2 when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name2'] = $attribute_type_name2;

        return $this;
    }

    /**
     * Gets attribute_type_id3
     *
     * @return int
     */
    public function getAttributeTypeId3()
    {
        return $this->container['attribute_type_id3'];
    }

    /**
     * Sets attribute_type_id3
     *
     * @param int $attribute_type_id3 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId3($attribute_type_id3)
    {
        $this->container['attribute_type_id3'] = $attribute_type_id3;

        return $this;
    }

    /**
     * Gets attribute_type_name3
     *
     * @return string
     */
    public function getAttributeTypeName3()
    {
        return $this->container['attribute_type_name3'];
    }

    /**
     * Sets attribute_type_name3
     *
     * @param string $attribute_type_name3 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName3($attribute_type_name3)
    {
        if (!is_null($attribute_type_name3) && (strlen($attribute_type_name3) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name3 when calling ProductType., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name3) && (strlen($attribute_type_name3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name3 when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name3'] = $attribute_type_name3;

        return $this;
    }

    /**
     * Gets attribute_type_id4
     *
     * @return int
     */
    public function getAttributeTypeId4()
    {
        return $this->container['attribute_type_id4'];
    }

    /**
     * Sets attribute_type_id4
     *
     * @param int $attribute_type_id4 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId4($attribute_type_id4)
    {
        $this->container['attribute_type_id4'] = $attribute_type_id4;

        return $this;
    }

    /**
     * Gets attribute_type_name4
     *
     * @return string
     */
    public function getAttributeTypeName4()
    {
        return $this->container['attribute_type_name4'];
    }

    /**
     * Sets attribute_type_name4
     *
     * @param string $attribute_type_name4 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName4($attribute_type_name4)
    {
        if (!is_null($attribute_type_name4) && (strlen($attribute_type_name4) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name4 when calling ProductType., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name4) && (strlen($attribute_type_name4) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name4 when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name4'] = $attribute_type_name4;

        return $this;
    }

    /**
     * Gets attribute_type_id5
     *
     * @return int
     */
    public function getAttributeTypeId5()
    {
        return $this->container['attribute_type_id5'];
    }

    /**
     * Sets attribute_type_id5
     *
     * @param int $attribute_type_id5 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId5($attribute_type_id5)
    {
        $this->container['attribute_type_id5'] = $attribute_type_id5;

        return $this;
    }

    /**
     * Gets attribute_type_name5
     *
     * @return string
     */
    public function getAttributeTypeName5()
    {
        return $this->container['attribute_type_name5'];
    }

    /**
     * Sets attribute_type_name5
     *
     * @param string $attribute_type_name5 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName5($attribute_type_name5)
    {
        if (!is_null($attribute_type_name5) && (strlen($attribute_type_name5) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name5 when calling ProductType., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name5) && (strlen($attribute_type_name5) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name5 when calling ProductType., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name5'] = $attribute_type_name5;

        return $this;
    }

    /**
     * Gets attribute_type
     *
     * @return \Swagger\Client\Model\AttributeType[]
     */
    public function getAttributeType()
    {
        return $this->container['attribute_type'];
    }

    /**
     * Sets attribute_type
     *
     * @param \Swagger\Client\Model\AttributeType[] $attribute_type Konkrete Eigenschaftstypen von Produkteigenschaften.
     *
     * @return $this
     */
    public function setAttributeType($attribute_type)
    {
        $this->container['attribute_type'] = $attribute_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


