<?php
/**
 * Supplier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Supplier Class Doc Comment
 *
 * @category Class
 * @description Lieferant einer Bezugsquelle.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Supplier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'supplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'deeplink' => 'string',
        'customer_account_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'deeplink' => null,
        'customer_account_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'deeplink' => 'deeplink',
        'customer_account_number' => 'customerAccountNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'deeplink' => 'setDeeplink',
        'customer_account_number' => 'setCustomerAccountNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'deeplink' => 'getDeeplink',
        'customer_account_number' => 'getCustomerAccountNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['deeplink'] = isset($data['deeplink']) ? $data['deeplink'] : null;
        $this->container['customer_account_number'] = isset($data['customer_account_number']) ? $data['customer_account_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['deeplink'] === null) {
            $invalidProperties[] = "'deeplink' can't be null";
        }
        if ((strlen($this->container['deeplink']) > 2048)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be smaller than or equal to 2048.";
        }

        if ((strlen($this->container['deeplink']) < 0)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_account_number']) && (strlen($this->container['customer_account_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'customer_account_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['customer_account_number']) && (strlen($this->container['customer_account_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_account_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 255) {
            return false;
        }
        if (strlen($this->container['name']) < 0) {
            return false;
        }
        if ($this->container['deeplink'] === null) {
            return false;
        }
        if (strlen($this->container['deeplink']) > 2048) {
            return false;
        }
        if (strlen($this->container['deeplink']) < 0) {
            return false;
        }
        if (strlen($this->container['customer_account_number']) > 255) {
            return false;
        }
        if (strlen($this->container['customer_account_number']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Eindeutiger Key
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Bezeichner des Lieferanten
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Supplier., must be smaller than or equal to 255.');
        }
        if ((strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Supplier., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets deeplink
     *
     * @return string
     */
    public function getDeeplink()
    {
        return $this->container['deeplink'];
    }

    /**
     * Sets deeplink
     *
     * @param string $deeplink URL, Link auf den Lieferanten innerhalb der ITscope Plattform
     *
     * @return $this
     */
    public function setDeeplink($deeplink)
    {
        if ((strlen($deeplink) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling Supplier., must be smaller than or equal to 2048.');
        }
        if ((strlen($deeplink) < 0)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling Supplier., must be bigger than or equal to 0.');
        }

        $this->container['deeplink'] = $deeplink;

        return $this;
    }

    /**
     * Gets customer_account_number
     *
     * @return string
     */
    public function getCustomerAccountNumber()
    {
        return $this->container['customer_account_number'];
    }

    /**
     * Sets customer_account_number
     *
     * @param string $customer_account_number Kundennummer im Falle einer Partnerschaft. Kann als Filter verwendet werden, um zu ermitteln ob zu diesem Lieferanten eine Parnerschaft existiert
     *
     * @return $this
     */
    public function setCustomerAccountNumber($customer_account_number)
    {
        if (!is_null($customer_account_number) && (strlen($customer_account_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_number when calling Supplier., must be smaller than or equal to 255.');
        }
        if (!is_null($customer_account_number) && (strlen($customer_account_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_number when calling Supplier., must be bigger than or equal to 0.');
        }

        $this->container['customer_account_number'] = $customer_account_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


