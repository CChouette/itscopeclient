<?php
/**
 * Deal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Model;

use \ArrayAccess;
use \Boracomputer\ITScope\ObjectSerializer;

/**
 * Deal Class Doc Comment
 *
 * @category Class
 * @description Detailinformationen zu einem Auftrag, Bestellung
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Deal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'deal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
        'customer_order_id' => 'string',
        'status' => 'string',
        'status_message' => 'string',
        'status_date' => '\DateTime',
        'archived' => 'bool',
        'vendor' => '\Boracomputer\ITScope\Model\Vendor',
        'order' => '\Boracomputer\ITScope\Model\Order[]',
        'orderresponse' => '\Boracomputer\ITScope\Model\Orderresponse[]',
        'dispatchnotification' => '\Boracomputer\ITScope\Model\Dispatchnotification[]',
        'invoice' => '\Boracomputer\ITScope\Model\Invoice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
        'customer_order_id' => null,
        'status' => null,
        'status_message' => null,
        'status_date' => 'date-time',
        'archived' => null,
        'vendor' => null,
        'order' => null,
        'orderresponse' => null,
        'dispatchnotification' => null,
        'invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
        'customer_order_id' => 'customerOrderId',
        'status' => 'status',
        'status_message' => 'statusMessage',
        'status_date' => 'statusDate',
        'archived' => 'archived',
        'vendor' => 'vendor',
        'order' => 'order',
        'orderresponse' => 'orderresponse',
        'dispatchnotification' => 'dispatchnotification',
        'invoice' => 'invoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'customer_order_id' => 'setCustomerOrderId',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'status_date' => 'setStatusDate',
        'archived' => 'setArchived',
        'vendor' => 'setVendor',
        'order' => 'setOrder',
        'orderresponse' => 'setOrderresponse',
        'dispatchnotification' => 'setDispatchnotification',
        'invoice' => 'setInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'customer_order_id' => 'getCustomerOrderId',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'status_date' => 'getStatusDate',
        'archived' => 'getArchived',
        'vendor' => 'getVendor',
        'order' => 'getOrder',
        'orderresponse' => 'getOrderresponse',
        'dispatchnotification' => 'getDispatchnotification',
        'invoice' => 'getInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['customer_order_id'] = isset($data['customer_order_id']) ? $data['customer_order_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['status_date'] = isset($data['status_date']) ? $data['status_date'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['orderresponse'] = isset($data['orderresponse']) ? $data['orderresponse'] : null;
        $this->container['dispatchnotification'] = isset($data['dispatchnotification']) ? $data['dispatchnotification'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['order_id']) && (strlen($this->container['order_id']) > 250)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['order_id']) && (strlen($this->container['order_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_order_id']) && (strlen($this->container['customer_order_id']) > 250)) {
            $invalidProperties[] = "invalid value for 'customer_order_id', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['customer_order_id']) && (strlen($this->container['customer_order_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_order_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['status']) && (strlen($this->container['status']) > 255)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['status']) && (strlen($this->container['status']) < 0)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['status_message']) && (strlen($this->container['status_message']) > 8192)) {
            $invalidProperties[] = "invalid value for 'status_message', the character length must be smaller than or equal to 8192.";
        }

        if (!is_null($this->container['status_message']) && (strlen($this->container['status_message']) < 0)) {
            $invalidProperties[] = "invalid value for 'status_message', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['order_id']) > 250) {
            return false;
        }
        if (strlen($this->container['order_id']) < 0) {
            return false;
        }
        if (strlen($this->container['customer_order_id']) > 250) {
            return false;
        }
        if (strlen($this->container['customer_order_id']) < 0) {
            return false;
        }
        if (strlen($this->container['status']) > 255) {
            return false;
        }
        if (strlen($this->container['status']) < 0) {
            return false;
        }
        if (strlen($this->container['status_message']) > 8192) {
            return false;
        }
        if (strlen($this->container['status_message']) < 0) {
            return false;
        }
        if ($this->container['vendor'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Eindeutiger Key der Bestellung (intern)
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        if (!is_null($order_id) && (strlen($order_id) > 250)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling Deal., must be smaller than or equal to 250.');
        }
        if (!is_null($order_id) && (strlen($order_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling Deal., must be bigger than or equal to 0.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets customer_order_id
     *
     * @return string
     */
    public function getCustomerOrderId()
    {
        return $this->container['customer_order_id'];
    }

    /**
     * Sets customer_order_id
     *
     * @param string $customer_order_id Individuelle Bestellnummer des Bestellers
     *
     * @return $this
     */
    public function setCustomerOrderId($customer_order_id)
    {
        if (!is_null($customer_order_id) && (strlen($customer_order_id) > 250)) {
            throw new \InvalidArgumentException('invalid length for $customer_order_id when calling Deal., must be smaller than or equal to 250.');
        }
        if (!is_null($customer_order_id) && (strlen($customer_order_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_order_id when calling Deal., must be bigger than or equal to 0.');
        }

        $this->container['customer_order_id'] = $customer_order_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Kennung des Zustandes, in dem sich die Bestellung befindet, z.B. SENT
     *
     * @return $this
     */
    public function setStatus($status)
    {
        if (!is_null($status) && (strlen($status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Deal., must be smaller than or equal to 255.');
        }
        if (!is_null($status) && (strlen($status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Deal., must be bigger than or equal to 0.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string $status_message Textuelle Zustandsbeschreibung
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        if (!is_null($status_message) && (strlen($status_message) > 8192)) {
            throw new \InvalidArgumentException('invalid length for $status_message when calling Deal., must be smaller than or equal to 8192.');
        }
        if (!is_null($status_message) && (strlen($status_message) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status_message when calling Deal., must be bigger than or equal to 0.');
        }

        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return \DateTime
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param \DateTime $status_date Letztes Änderungsdatum der Bestellung
     *
     * @return $this
     */
    public function setStatusDate($status_date)
    {
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived Archivflag der Bestellung
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \Boracomputer\ITScope\Model\Vendor
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \Boracomputer\ITScope\Model\Vendor $vendor Referenz auf den Verkäufer (interner Key, n:1)
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Boracomputer\ITScope\Model\Order[]
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Boracomputer\ITScope\Model\Order[] $order Details zur Liste der <a href=\"https://support.itscope.com/hc/de/articles/206814239\">OpenTrans 2.1 ORDER</a> Dokumente
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets orderresponse
     *
     * @return \Boracomputer\ITScope\Model\Orderresponse[]
     */
    public function getOrderresponse()
    {
        return $this->container['orderresponse'];
    }

    /**
     * Sets orderresponse
     *
     * @param \Boracomputer\ITScope\Model\Orderresponse[] $orderresponse Details zur Liste der <a href=\"https://support.itscope.com/hc/de/articles/206814239\">OpenTrans 2.1 ORDERRESPONSE</a> Dokumente
     *
     * @return $this
     */
    public function setOrderresponse($orderresponse)
    {
        $this->container['orderresponse'] = $orderresponse;

        return $this;
    }

    /**
     * Gets dispatchnotification
     *
     * @return \Boracomputer\ITScope\Model\Dispatchnotification[]
     */
    public function getDispatchnotification()
    {
        return $this->container['dispatchnotification'];
    }

    /**
     * Sets dispatchnotification
     *
     * @param \Boracomputer\ITScope\Model\Dispatchnotification[] $dispatchnotification Details zur Liste der <a href=\"https://support.itscope.com/hc/de/articles/206814239\">OpenTrans 2.1 DISPATCHNOTIFICATION</a> Dokumente
     *
     * @return $this
     */
    public function setDispatchnotification($dispatchnotification)
    {
        $this->container['dispatchnotification'] = $dispatchnotification;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Boracomputer\ITScope\Model\Invoice[]
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Boracomputer\ITScope\Model\Invoice[] $invoice Details zur Liste der <a href=\"https://support.itscope.com/hc/de/articles/206814239\">OpenTrans 2.1 INVOICE</a> Dokumente
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


