<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Model;

use \ArrayAccess;
use \Boracomputer\ITScope\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description Produkt des ITscope-Katalogs.
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'puid' => 'int',
        'ean' => 'string',
        'manufacturer_sku' => 'string',
        'icecat_id' => 'string',
        'cnet_id' => 'string',
        'bechlem_id' => 'string',
        'e_class' => 'string',
        'manufacturer_id' => 'int',
        'manufacturer_name' => 'string',
        'product_name_with_manufacturer' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'product_type_id' => 'int',
        'product_type_group_id' => 'string',
        'product_type_group_name' => 'string',
        'product_type_name' => 'string',
        'attribute_type_id1' => 'int',
        'attribute_type_name1' => 'string',
        'attribute_type_id2' => 'int',
        'attribute_type_name2' => 'string',
        'attribute_type_id3' => 'int',
        'attribute_type_name3' => 'string',
        'attribute_type_id4' => 'int',
        'attribute_type_name4' => 'string',
        'attribute_type_id5' => 'int',
        'attribute_type_name5' => 'string',
        'attribute_value1' => 'string',
        'attribute_value2' => 'string',
        'attribute_value3' => 'string',
        'attribute_value4' => 'string',
        'attribute_value5' => 'string',
        'product_sub_type_id' => 'string',
        'product_sub_type' => 'string',
        'product_line_id' => 'int',
        'product_line' => 'string',
        'product_model' => 'string',
        'estimate_gross_weight' => 'double',
        'gross_dim_x' => 'string',
        'gross_dim_y' => 'string',
        'gross_dim_z' => 'string',
        'customs_tariff_number' => 'string',
        'deeplink' => 'string',
        'standard_html_datasheet' => 'string',
        'standard_pdf_datasheet' => 'string',
        'manufacturer_site' => 'string',
        'manufacturer_datasheet' => 'string',
        'image_thumb' => 'string',
        'image_thumb_width' => 'int',
        'image_thumb_height' => 'int',
        'image1' => 'string',
        'image_width1' => 'int',
        'image_height1' => 'int',
        'image2' => 'string',
        'image_width2' => 'int',
        'image_height2' => 'int',
        'image3' => 'string',
        'image_width3' => 'int',
        'image_height3' => 'int',
        'image4' => 'string',
        'image_width4' => 'int',
        'image_height4' => 'int',
        'image5' => 'string',
        'image_width5' => 'int',
        'image_height5' => 'int',
        'energy_label' => 'string',
        'entry_date' => '\DateTime',
        'rank' => 'int',
        'qualification' => 'int',
        'warranty_text' => 'string',
        'marketing_text' => 'string',
        'html_specs' => 'string',
        'recommended_retail_price_net' => 'double',
        'price' => 'double',
        'price_calc' => 'double',
        'currency_code' => 'string',
        'price_calc_vat' => 'double',
        'price_last_update' => '\DateTime',
        'price_supplier_id' => 'int',
        'price_supplier_name' => 'string',
        'price_supplier_item_id' => 'int',
        'price_supplier_sku' => 'string',
        'stock_supplier_text' => 'string',
        'stock_status' => 'int',
        'stock_status_text' => 'string',
        'stock' => 'int',
        'external_stock' => 'int',
        'incoming_stock' => 'int',
        'stock_availability_date' => '\DateTime',
        'stock_last_update' => '\DateTime',
        'aggregated_status' => 'int',
        'aggregated_status_text' => 'string',
        'aggregated_stock' => 'int',
        'aggregated_supplier_items' => 'int',
        'supplier_item' => '\Boracomputer\ITScope\Model\SupplierItem[]',
        'attribute' => '\Boracomputer\ITScope\Model\Attribute[]',
        'attribute_cluster' => '\Boracomputer\ITScope\Model\AttributeCluster[]',
        'accessory' => '\Boracomputer\ITScope\Model\Accessory[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'puid' => 'int64',
        'ean' => null,
        'manufacturer_sku' => null,
        'icecat_id' => null,
        'cnet_id' => null,
        'bechlem_id' => null,
        'e_class' => null,
        'manufacturer_id' => 'int64',
        'manufacturer_name' => null,
        'product_name_with_manufacturer' => null,
        'short_description' => null,
        'long_description' => null,
        'product_type_id' => 'int64',
        'product_type_group_id' => null,
        'product_type_group_name' => null,
        'product_type_name' => null,
        'attribute_type_id1' => 'int64',
        'attribute_type_name1' => null,
        'attribute_type_id2' => 'int64',
        'attribute_type_name2' => null,
        'attribute_type_id3' => 'int64',
        'attribute_type_name3' => null,
        'attribute_type_id4' => 'int64',
        'attribute_type_name4' => null,
        'attribute_type_id5' => 'int64',
        'attribute_type_name5' => null,
        'attribute_value1' => null,
        'attribute_value2' => null,
        'attribute_value3' => null,
        'attribute_value4' => null,
        'attribute_value5' => null,
        'product_sub_type_id' => null,
        'product_sub_type' => null,
        'product_line_id' => 'int64',
        'product_line' => null,
        'product_model' => null,
        'estimate_gross_weight' => 'double',
        'gross_dim_x' => null,
        'gross_dim_y' => null,
        'gross_dim_z' => null,
        'customs_tariff_number' => null,
        'deeplink' => null,
        'standard_html_datasheet' => null,
        'standard_pdf_datasheet' => null,
        'manufacturer_site' => null,
        'manufacturer_datasheet' => null,
        'image_thumb' => null,
        'image_thumb_width' => 'int32',
        'image_thumb_height' => 'int32',
        'image1' => null,
        'image_width1' => 'int32',
        'image_height1' => 'int32',
        'image2' => null,
        'image_width2' => 'int32',
        'image_height2' => 'int32',
        'image3' => null,
        'image_width3' => 'int32',
        'image_height3' => 'int32',
        'image4' => null,
        'image_width4' => 'int32',
        'image_height4' => 'int32',
        'image5' => null,
        'image_width5' => 'int32',
        'image_height5' => 'int32',
        'energy_label' => null,
        'entry_date' => 'date-time',
        'rank' => 'int32',
        'qualification' => 'int32',
        'warranty_text' => null,
        'marketing_text' => null,
        'html_specs' => null,
        'recommended_retail_price_net' => 'double',
        'price' => 'double',
        'price_calc' => 'double',
        'currency_code' => null,
        'price_calc_vat' => 'double',
        'price_last_update' => 'date-time',
        'price_supplier_id' => 'int64',
        'price_supplier_name' => null,
        'price_supplier_item_id' => 'int64',
        'price_supplier_sku' => null,
        'stock_supplier_text' => null,
        'stock_status' => 'int32',
        'stock_status_text' => null,
        'stock' => 'int32',
        'external_stock' => 'int32',
        'incoming_stock' => 'int32',
        'stock_availability_date' => 'date-time',
        'stock_last_update' => 'date-time',
        'aggregated_status' => 'int32',
        'aggregated_status_text' => null,
        'aggregated_stock' => 'int32',
        'aggregated_supplier_items' => 'int32',
        'supplier_item' => null,
        'attribute' => null,
        'attribute_cluster' => null,
        'accessory' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'puid' => 'puid',
        'ean' => 'ean',
        'manufacturer_sku' => 'manufacturerSKU',
        'icecat_id' => 'icecatId',
        'cnet_id' => 'cnetId',
        'bechlem_id' => 'bechlemId',
        'e_class' => 'eClass',
        'manufacturer_id' => 'manufacturerId',
        'manufacturer_name' => 'manufacturerName',
        'product_name_with_manufacturer' => 'productNameWithManufacturer',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'product_type_id' => 'productTypeId',
        'product_type_group_id' => 'productTypeGroupId',
        'product_type_group_name' => 'productTypeGroupName',
        'product_type_name' => 'productTypeName',
        'attribute_type_id1' => 'attributeTypeId1',
        'attribute_type_name1' => 'attributeTypeName1',
        'attribute_type_id2' => 'attributeTypeId2',
        'attribute_type_name2' => 'attributeTypeName2',
        'attribute_type_id3' => 'attributeTypeId3',
        'attribute_type_name3' => 'attributeTypeName3',
        'attribute_type_id4' => 'attributeTypeId4',
        'attribute_type_name4' => 'attributeTypeName4',
        'attribute_type_id5' => 'attributeTypeId5',
        'attribute_type_name5' => 'attributeTypeName5',
        'attribute_value1' => 'attributeValue1',
        'attribute_value2' => 'attributeValue2',
        'attribute_value3' => 'attributeValue3',
        'attribute_value4' => 'attributeValue4',
        'attribute_value5' => 'attributeValue5',
        'product_sub_type_id' => 'productSubTypeId',
        'product_sub_type' => 'productSubType',
        'product_line_id' => 'productLineId',
        'product_line' => 'productLine',
        'product_model' => 'productModel',
        'estimate_gross_weight' => 'estimateGrossWeight',
        'gross_dim_x' => 'grossDimX',
        'gross_dim_y' => 'grossDimY',
        'gross_dim_z' => 'grossDimZ',
        'customs_tariff_number' => 'customsTariffNumber',
        'deeplink' => 'deeplink',
        'standard_html_datasheet' => 'standardHtmlDatasheet',
        'standard_pdf_datasheet' => 'standardPdfDatasheet',
        'manufacturer_site' => 'manufacturerSite',
        'manufacturer_datasheet' => 'manufacturerDatasheet',
        'image_thumb' => 'imageThumb',
        'image_thumb_width' => 'imageThumbWidth',
        'image_thumb_height' => 'imageThumbHeight',
        'image1' => 'image1',
        'image_width1' => 'imageWidth1',
        'image_height1' => 'imageHeight1',
        'image2' => 'image2',
        'image_width2' => 'imageWidth2',
        'image_height2' => 'imageHeight2',
        'image3' => 'image3',
        'image_width3' => 'imageWidth3',
        'image_height3' => 'imageHeight3',
        'image4' => 'image4',
        'image_width4' => 'imageWidth4',
        'image_height4' => 'imageHeight4',
        'image5' => 'image5',
        'image_width5' => 'imageWidth5',
        'image_height5' => 'imageHeight5',
        'energy_label' => 'energyLabel',
        'entry_date' => 'entryDate',
        'rank' => 'rank',
        'qualification' => 'qualification',
        'warranty_text' => 'warrantyText',
        'marketing_text' => 'marketingText',
        'html_specs' => 'htmlSpecs',
        'recommended_retail_price_net' => 'recommendedRetailPriceNet',
        'price' => 'price',
        'price_calc' => 'priceCalc',
        'currency_code' => 'currencyCode',
        'price_calc_vat' => 'priceCalcVat',
        'price_last_update' => 'priceLastUpdate',
        'price_supplier_id' => 'priceSupplierId',
        'price_supplier_name' => 'priceSupplierName',
        'price_supplier_item_id' => 'priceSupplierItemId',
        'price_supplier_sku' => 'priceSupplierSKU',
        'stock_supplier_text' => 'stockSupplierText',
        'stock_status' => 'stockStatus',
        'stock_status_text' => 'stockStatusText',
        'stock' => 'stock',
        'external_stock' => 'externalStock',
        'incoming_stock' => 'incomingStock',
        'stock_availability_date' => 'stockAvailabilityDate',
        'stock_last_update' => 'stockLastUpdate',
        'aggregated_status' => 'aggregatedStatus',
        'aggregated_status_text' => 'aggregatedStatusText',
        'aggregated_stock' => 'aggregatedStock',
        'aggregated_supplier_items' => 'aggregatedSupplierItems',
        'supplier_item' => 'supplierItem',
        'attribute' => 'attribute',
        'attribute_cluster' => 'attributeCluster',
        'accessory' => 'accessory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'puid' => 'setPuid',
        'ean' => 'setEan',
        'manufacturer_sku' => 'setManufacturerSku',
        'icecat_id' => 'setIcecatId',
        'cnet_id' => 'setCnetId',
        'bechlem_id' => 'setBechlemId',
        'e_class' => 'setEClass',
        'manufacturer_id' => 'setManufacturerId',
        'manufacturer_name' => 'setManufacturerName',
        'product_name_with_manufacturer' => 'setProductNameWithManufacturer',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'product_type_id' => 'setProductTypeId',
        'product_type_group_id' => 'setProductTypeGroupId',
        'product_type_group_name' => 'setProductTypeGroupName',
        'product_type_name' => 'setProductTypeName',
        'attribute_type_id1' => 'setAttributeTypeId1',
        'attribute_type_name1' => 'setAttributeTypeName1',
        'attribute_type_id2' => 'setAttributeTypeId2',
        'attribute_type_name2' => 'setAttributeTypeName2',
        'attribute_type_id3' => 'setAttributeTypeId3',
        'attribute_type_name3' => 'setAttributeTypeName3',
        'attribute_type_id4' => 'setAttributeTypeId4',
        'attribute_type_name4' => 'setAttributeTypeName4',
        'attribute_type_id5' => 'setAttributeTypeId5',
        'attribute_type_name5' => 'setAttributeTypeName5',
        'attribute_value1' => 'setAttributeValue1',
        'attribute_value2' => 'setAttributeValue2',
        'attribute_value3' => 'setAttributeValue3',
        'attribute_value4' => 'setAttributeValue4',
        'attribute_value5' => 'setAttributeValue5',
        'product_sub_type_id' => 'setProductSubTypeId',
        'product_sub_type' => 'setProductSubType',
        'product_line_id' => 'setProductLineId',
        'product_line' => 'setProductLine',
        'product_model' => 'setProductModel',
        'estimate_gross_weight' => 'setEstimateGrossWeight',
        'gross_dim_x' => 'setGrossDimX',
        'gross_dim_y' => 'setGrossDimY',
        'gross_dim_z' => 'setGrossDimZ',
        'customs_tariff_number' => 'setCustomsTariffNumber',
        'deeplink' => 'setDeeplink',
        'standard_html_datasheet' => 'setStandardHtmlDatasheet',
        'standard_pdf_datasheet' => 'setStandardPdfDatasheet',
        'manufacturer_site' => 'setManufacturerSite',
        'manufacturer_datasheet' => 'setManufacturerDatasheet',
        'image_thumb' => 'setImageThumb',
        'image_thumb_width' => 'setImageThumbWidth',
        'image_thumb_height' => 'setImageThumbHeight',
        'image1' => 'setImage1',
        'image_width1' => 'setImageWidth1',
        'image_height1' => 'setImageHeight1',
        'image2' => 'setImage2',
        'image_width2' => 'setImageWidth2',
        'image_height2' => 'setImageHeight2',
        'image3' => 'setImage3',
        'image_width3' => 'setImageWidth3',
        'image_height3' => 'setImageHeight3',
        'image4' => 'setImage4',
        'image_width4' => 'setImageWidth4',
        'image_height4' => 'setImageHeight4',
        'image5' => 'setImage5',
        'image_width5' => 'setImageWidth5',
        'image_height5' => 'setImageHeight5',
        'energy_label' => 'setEnergyLabel',
        'entry_date' => 'setEntryDate',
        'rank' => 'setRank',
        'qualification' => 'setQualification',
        'warranty_text' => 'setWarrantyText',
        'marketing_text' => 'setMarketingText',
        'html_specs' => 'setHtmlSpecs',
        'recommended_retail_price_net' => 'setRecommendedRetailPriceNet',
        'price' => 'setPrice',
        'price_calc' => 'setPriceCalc',
        'currency_code' => 'setCurrencyCode',
        'price_calc_vat' => 'setPriceCalcVat',
        'price_last_update' => 'setPriceLastUpdate',
        'price_supplier_id' => 'setPriceSupplierId',
        'price_supplier_name' => 'setPriceSupplierName',
        'price_supplier_item_id' => 'setPriceSupplierItemId',
        'price_supplier_sku' => 'setPriceSupplierSku',
        'stock_supplier_text' => 'setStockSupplierText',
        'stock_status' => 'setStockStatus',
        'stock_status_text' => 'setStockStatusText',
        'stock' => 'setStock',
        'external_stock' => 'setExternalStock',
        'incoming_stock' => 'setIncomingStock',
        'stock_availability_date' => 'setStockAvailabilityDate',
        'stock_last_update' => 'setStockLastUpdate',
        'aggregated_status' => 'setAggregatedStatus',
        'aggregated_status_text' => 'setAggregatedStatusText',
        'aggregated_stock' => 'setAggregatedStock',
        'aggregated_supplier_items' => 'setAggregatedSupplierItems',
        'supplier_item' => 'setSupplierItem',
        'attribute' => 'setAttribute',
        'attribute_cluster' => 'setAttributeCluster',
        'accessory' => 'setAccessory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'puid' => 'getPuid',
        'ean' => 'getEan',
        'manufacturer_sku' => 'getManufacturerSku',
        'icecat_id' => 'getIcecatId',
        'cnet_id' => 'getCnetId',
        'bechlem_id' => 'getBechlemId',
        'e_class' => 'getEClass',
        'manufacturer_id' => 'getManufacturerId',
        'manufacturer_name' => 'getManufacturerName',
        'product_name_with_manufacturer' => 'getProductNameWithManufacturer',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'product_type_id' => 'getProductTypeId',
        'product_type_group_id' => 'getProductTypeGroupId',
        'product_type_group_name' => 'getProductTypeGroupName',
        'product_type_name' => 'getProductTypeName',
        'attribute_type_id1' => 'getAttributeTypeId1',
        'attribute_type_name1' => 'getAttributeTypeName1',
        'attribute_type_id2' => 'getAttributeTypeId2',
        'attribute_type_name2' => 'getAttributeTypeName2',
        'attribute_type_id3' => 'getAttributeTypeId3',
        'attribute_type_name3' => 'getAttributeTypeName3',
        'attribute_type_id4' => 'getAttributeTypeId4',
        'attribute_type_name4' => 'getAttributeTypeName4',
        'attribute_type_id5' => 'getAttributeTypeId5',
        'attribute_type_name5' => 'getAttributeTypeName5',
        'attribute_value1' => 'getAttributeValue1',
        'attribute_value2' => 'getAttributeValue2',
        'attribute_value3' => 'getAttributeValue3',
        'attribute_value4' => 'getAttributeValue4',
        'attribute_value5' => 'getAttributeValue5',
        'product_sub_type_id' => 'getProductSubTypeId',
        'product_sub_type' => 'getProductSubType',
        'product_line_id' => 'getProductLineId',
        'product_line' => 'getProductLine',
        'product_model' => 'getProductModel',
        'estimate_gross_weight' => 'getEstimateGrossWeight',
        'gross_dim_x' => 'getGrossDimX',
        'gross_dim_y' => 'getGrossDimY',
        'gross_dim_z' => 'getGrossDimZ',
        'customs_tariff_number' => 'getCustomsTariffNumber',
        'deeplink' => 'getDeeplink',
        'standard_html_datasheet' => 'getStandardHtmlDatasheet',
        'standard_pdf_datasheet' => 'getStandardPdfDatasheet',
        'manufacturer_site' => 'getManufacturerSite',
        'manufacturer_datasheet' => 'getManufacturerDatasheet',
        'image_thumb' => 'getImageThumb',
        'image_thumb_width' => 'getImageThumbWidth',
        'image_thumb_height' => 'getImageThumbHeight',
        'image1' => 'getImage1',
        'image_width1' => 'getImageWidth1',
        'image_height1' => 'getImageHeight1',
        'image2' => 'getImage2',
        'image_width2' => 'getImageWidth2',
        'image_height2' => 'getImageHeight2',
        'image3' => 'getImage3',
        'image_width3' => 'getImageWidth3',
        'image_height3' => 'getImageHeight3',
        'image4' => 'getImage4',
        'image_width4' => 'getImageWidth4',
        'image_height4' => 'getImageHeight4',
        'image5' => 'getImage5',
        'image_width5' => 'getImageWidth5',
        'image_height5' => 'getImageHeight5',
        'energy_label' => 'getEnergyLabel',
        'entry_date' => 'getEntryDate',
        'rank' => 'getRank',
        'qualification' => 'getQualification',
        'warranty_text' => 'getWarrantyText',
        'marketing_text' => 'getMarketingText',
        'html_specs' => 'getHtmlSpecs',
        'recommended_retail_price_net' => 'getRecommendedRetailPriceNet',
        'price' => 'getPrice',
        'price_calc' => 'getPriceCalc',
        'currency_code' => 'getCurrencyCode',
        'price_calc_vat' => 'getPriceCalcVat',
        'price_last_update' => 'getPriceLastUpdate',
        'price_supplier_id' => 'getPriceSupplierId',
        'price_supplier_name' => 'getPriceSupplierName',
        'price_supplier_item_id' => 'getPriceSupplierItemId',
        'price_supplier_sku' => 'getPriceSupplierSku',
        'stock_supplier_text' => 'getStockSupplierText',
        'stock_status' => 'getStockStatus',
        'stock_status_text' => 'getStockStatusText',
        'stock' => 'getStock',
        'external_stock' => 'getExternalStock',
        'incoming_stock' => 'getIncomingStock',
        'stock_availability_date' => 'getStockAvailabilityDate',
        'stock_last_update' => 'getStockLastUpdate',
        'aggregated_status' => 'getAggregatedStatus',
        'aggregated_status_text' => 'getAggregatedStatusText',
        'aggregated_stock' => 'getAggregatedStock',
        'aggregated_supplier_items' => 'getAggregatedSupplierItems',
        'supplier_item' => 'getSupplierItem',
        'attribute' => 'getAttribute',
        'attribute_cluster' => 'getAttributeCluster',
        'accessory' => 'getAccessory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['puid'] = isset($data['puid']) ? $data['puid'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['manufacturer_sku'] = isset($data['manufacturer_sku']) ? $data['manufacturer_sku'] : null;
        $this->container['icecat_id'] = isset($data['icecat_id']) ? $data['icecat_id'] : null;
        $this->container['cnet_id'] = isset($data['cnet_id']) ? $data['cnet_id'] : null;
        $this->container['bechlem_id'] = isset($data['bechlem_id']) ? $data['bechlem_id'] : null;
        $this->container['e_class'] = isset($data['e_class']) ? $data['e_class'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['manufacturer_name'] = isset($data['manufacturer_name']) ? $data['manufacturer_name'] : null;
        $this->container['product_name_with_manufacturer'] = isset($data['product_name_with_manufacturer']) ? $data['product_name_with_manufacturer'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['product_type_id'] = isset($data['product_type_id']) ? $data['product_type_id'] : null;
        $this->container['product_type_group_id'] = isset($data['product_type_group_id']) ? $data['product_type_group_id'] : null;
        $this->container['product_type_group_name'] = isset($data['product_type_group_name']) ? $data['product_type_group_name'] : null;
        $this->container['product_type_name'] = isset($data['product_type_name']) ? $data['product_type_name'] : null;
        $this->container['attribute_type_id1'] = isset($data['attribute_type_id1']) ? $data['attribute_type_id1'] : null;
        $this->container['attribute_type_name1'] = isset($data['attribute_type_name1']) ? $data['attribute_type_name1'] : null;
        $this->container['attribute_type_id2'] = isset($data['attribute_type_id2']) ? $data['attribute_type_id2'] : null;
        $this->container['attribute_type_name2'] = isset($data['attribute_type_name2']) ? $data['attribute_type_name2'] : null;
        $this->container['attribute_type_id3'] = isset($data['attribute_type_id3']) ? $data['attribute_type_id3'] : null;
        $this->container['attribute_type_name3'] = isset($data['attribute_type_name3']) ? $data['attribute_type_name3'] : null;
        $this->container['attribute_type_id4'] = isset($data['attribute_type_id4']) ? $data['attribute_type_id4'] : null;
        $this->container['attribute_type_name4'] = isset($data['attribute_type_name4']) ? $data['attribute_type_name4'] : null;
        $this->container['attribute_type_id5'] = isset($data['attribute_type_id5']) ? $data['attribute_type_id5'] : null;
        $this->container['attribute_type_name5'] = isset($data['attribute_type_name5']) ? $data['attribute_type_name5'] : null;
        $this->container['attribute_value1'] = isset($data['attribute_value1']) ? $data['attribute_value1'] : null;
        $this->container['attribute_value2'] = isset($data['attribute_value2']) ? $data['attribute_value2'] : null;
        $this->container['attribute_value3'] = isset($data['attribute_value3']) ? $data['attribute_value3'] : null;
        $this->container['attribute_value4'] = isset($data['attribute_value4']) ? $data['attribute_value4'] : null;
        $this->container['attribute_value5'] = isset($data['attribute_value5']) ? $data['attribute_value5'] : null;
        $this->container['product_sub_type_id'] = isset($data['product_sub_type_id']) ? $data['product_sub_type_id'] : null;
        $this->container['product_sub_type'] = isset($data['product_sub_type']) ? $data['product_sub_type'] : null;
        $this->container['product_line_id'] = isset($data['product_line_id']) ? $data['product_line_id'] : null;
        $this->container['product_line'] = isset($data['product_line']) ? $data['product_line'] : null;
        $this->container['product_model'] = isset($data['product_model']) ? $data['product_model'] : null;
        $this->container['estimate_gross_weight'] = isset($data['estimate_gross_weight']) ? $data['estimate_gross_weight'] : null;
        $this->container['gross_dim_x'] = isset($data['gross_dim_x']) ? $data['gross_dim_x'] : null;
        $this->container['gross_dim_y'] = isset($data['gross_dim_y']) ? $data['gross_dim_y'] : null;
        $this->container['gross_dim_z'] = isset($data['gross_dim_z']) ? $data['gross_dim_z'] : null;
        $this->container['customs_tariff_number'] = isset($data['customs_tariff_number']) ? $data['customs_tariff_number'] : null;
        $this->container['deeplink'] = isset($data['deeplink']) ? $data['deeplink'] : null;
        $this->container['standard_html_datasheet'] = isset($data['standard_html_datasheet']) ? $data['standard_html_datasheet'] : null;
        $this->container['standard_pdf_datasheet'] = isset($data['standard_pdf_datasheet']) ? $data['standard_pdf_datasheet'] : null;
        $this->container['manufacturer_site'] = isset($data['manufacturer_site']) ? $data['manufacturer_site'] : null;
        $this->container['manufacturer_datasheet'] = isset($data['manufacturer_datasheet']) ? $data['manufacturer_datasheet'] : null;
        $this->container['image_thumb'] = isset($data['image_thumb']) ? $data['image_thumb'] : null;
        $this->container['image_thumb_width'] = isset($data['image_thumb_width']) ? $data['image_thumb_width'] : null;
        $this->container['image_thumb_height'] = isset($data['image_thumb_height']) ? $data['image_thumb_height'] : null;
        $this->container['image1'] = isset($data['image1']) ? $data['image1'] : null;
        $this->container['image_width1'] = isset($data['image_width1']) ? $data['image_width1'] : null;
        $this->container['image_height1'] = isset($data['image_height1']) ? $data['image_height1'] : null;
        $this->container['image2'] = isset($data['image2']) ? $data['image2'] : null;
        $this->container['image_width2'] = isset($data['image_width2']) ? $data['image_width2'] : null;
        $this->container['image_height2'] = isset($data['image_height2']) ? $data['image_height2'] : null;
        $this->container['image3'] = isset($data['image3']) ? $data['image3'] : null;
        $this->container['image_width3'] = isset($data['image_width3']) ? $data['image_width3'] : null;
        $this->container['image_height3'] = isset($data['image_height3']) ? $data['image_height3'] : null;
        $this->container['image4'] = isset($data['image4']) ? $data['image4'] : null;
        $this->container['image_width4'] = isset($data['image_width4']) ? $data['image_width4'] : null;
        $this->container['image_height4'] = isset($data['image_height4']) ? $data['image_height4'] : null;
        $this->container['image5'] = isset($data['image5']) ? $data['image5'] : null;
        $this->container['image_width5'] = isset($data['image_width5']) ? $data['image_width5'] : null;
        $this->container['image_height5'] = isset($data['image_height5']) ? $data['image_height5'] : null;
        $this->container['energy_label'] = isset($data['energy_label']) ? $data['energy_label'] : null;
        $this->container['entry_date'] = isset($data['entry_date']) ? $data['entry_date'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['qualification'] = isset($data['qualification']) ? $data['qualification'] : null;
        $this->container['warranty_text'] = isset($data['warranty_text']) ? $data['warranty_text'] : null;
        $this->container['marketing_text'] = isset($data['marketing_text']) ? $data['marketing_text'] : null;
        $this->container['html_specs'] = isset($data['html_specs']) ? $data['html_specs'] : null;
        $this->container['recommended_retail_price_net'] = isset($data['recommended_retail_price_net']) ? $data['recommended_retail_price_net'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_calc'] = isset($data['price_calc']) ? $data['price_calc'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['price_calc_vat'] = isset($data['price_calc_vat']) ? $data['price_calc_vat'] : null;
        $this->container['price_last_update'] = isset($data['price_last_update']) ? $data['price_last_update'] : null;
        $this->container['price_supplier_id'] = isset($data['price_supplier_id']) ? $data['price_supplier_id'] : null;
        $this->container['price_supplier_name'] = isset($data['price_supplier_name']) ? $data['price_supplier_name'] : null;
        $this->container['price_supplier_item_id'] = isset($data['price_supplier_item_id']) ? $data['price_supplier_item_id'] : null;
        $this->container['price_supplier_sku'] = isset($data['price_supplier_sku']) ? $data['price_supplier_sku'] : null;
        $this->container['stock_supplier_text'] = isset($data['stock_supplier_text']) ? $data['stock_supplier_text'] : null;
        $this->container['stock_status'] = isset($data['stock_status']) ? $data['stock_status'] : null;
        $this->container['stock_status_text'] = isset($data['stock_status_text']) ? $data['stock_status_text'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['external_stock'] = isset($data['external_stock']) ? $data['external_stock'] : null;
        $this->container['incoming_stock'] = isset($data['incoming_stock']) ? $data['incoming_stock'] : null;
        $this->container['stock_availability_date'] = isset($data['stock_availability_date']) ? $data['stock_availability_date'] : null;
        $this->container['stock_last_update'] = isset($data['stock_last_update']) ? $data['stock_last_update'] : null;
        $this->container['aggregated_status'] = isset($data['aggregated_status']) ? $data['aggregated_status'] : null;
        $this->container['aggregated_status_text'] = isset($data['aggregated_status_text']) ? $data['aggregated_status_text'] : null;
        $this->container['aggregated_stock'] = isset($data['aggregated_stock']) ? $data['aggregated_stock'] : null;
        $this->container['aggregated_supplier_items'] = isset($data['aggregated_supplier_items']) ? $data['aggregated_supplier_items'] : null;
        $this->container['supplier_item'] = isset($data['supplier_item']) ? $data['supplier_item'] : null;
        $this->container['attribute'] = isset($data['attribute']) ? $data['attribute'] : null;
        $this->container['attribute_cluster'] = isset($data['attribute_cluster']) ? $data['attribute_cluster'] : null;
        $this->container['accessory'] = isset($data['accessory']) ? $data['accessory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['puid'] === null) {
            $invalidProperties[] = "'puid' can't be null";
        }
        if (!is_null($this->container['ean']) && (strlen($this->container['ean']) > 18)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['ean']) && (strlen($this->container['ean']) < 0)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturer_sku']) && (strlen($this->container['manufacturer_sku']) > 40)) {
            $invalidProperties[] = "invalid value for 'manufacturer_sku', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['manufacturer_sku']) && (strlen($this->container['manufacturer_sku']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_sku', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['icecat_id']) && (strlen($this->container['icecat_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'icecat_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['icecat_id']) && (strlen($this->container['icecat_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'icecat_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cnet_id']) && (strlen($this->container['cnet_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'cnet_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cnet_id']) && (strlen($this->container['cnet_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'cnet_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bechlem_id']) && (strlen($this->container['bechlem_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'bechlem_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bechlem_id']) && (strlen($this->container['bechlem_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'bechlem_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['e_class']) && (strlen($this->container['e_class']) > 11)) {
            $invalidProperties[] = "invalid value for 'e_class', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['e_class']) && (strlen($this->container['e_class']) < 0)) {
            $invalidProperties[] = "invalid value for 'e_class', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['manufacturer_id'] === null) {
            $invalidProperties[] = "'manufacturer_id' can't be null";
        }
        if (!is_null($this->container['manufacturer_name']) && (strlen($this->container['manufacturer_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'manufacturer_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['manufacturer_name']) && (strlen($this->container['manufacturer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['product_name_with_manufacturer'] === null) {
            $invalidProperties[] = "'product_name_with_manufacturer' can't be null";
        }
        if ($this->container['product_type_id'] === null) {
            $invalidProperties[] = "'product_type_id' can't be null";
        }
        if ($this->container['product_type_group_id'] === null) {
            $invalidProperties[] = "'product_type_group_id' can't be null";
        }
        if ($this->container['product_type_group_name'] === null) {
            $invalidProperties[] = "'product_type_group_name' can't be null";
        }
        if ($this->container['product_type_name'] === null) {
            $invalidProperties[] = "'product_type_name' can't be null";
        }
        if (!is_null($this->container['attribute_value1']) && (strlen($this->container['attribute_value1']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value1', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['attribute_value1']) && (strlen($this->container['attribute_value1']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_value1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_value2']) && (strlen($this->container['attribute_value2']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value2', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['attribute_value2']) && (strlen($this->container['attribute_value2']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_value2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_value3']) && (strlen($this->container['attribute_value3']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value3', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['attribute_value3']) && (strlen($this->container['attribute_value3']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_value3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_value4']) && (strlen($this->container['attribute_value4']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value4', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['attribute_value4']) && (strlen($this->container['attribute_value4']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_value4', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_value5']) && (strlen($this->container['attribute_value5']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value5', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['attribute_value5']) && (strlen($this->container['attribute_value5']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_value5', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_sub_type_id']) && (strlen($this->container['product_sub_type_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'product_sub_type_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_sub_type_id']) && (strlen($this->container['product_sub_type_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_sub_type_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_sub_type']) && (strlen($this->container['product_sub_type']) > 1024)) {
            $invalidProperties[] = "invalid value for 'product_sub_type', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_sub_type']) && (strlen($this->container['product_sub_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_sub_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_line']) && (strlen($this->container['product_line']) > 1024)) {
            $invalidProperties[] = "invalid value for 'product_line', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_line']) && (strlen($this->container['product_line']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_line', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_model']) && (strlen($this->container['product_model']) > 1024)) {
            $invalidProperties[] = "invalid value for 'product_model', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_model']) && (strlen($this->container['product_model']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_model', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gross_dim_x']) && (strlen($this->container['gross_dim_x']) > 36)) {
            $invalidProperties[] = "invalid value for 'gross_dim_x', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['gross_dim_x']) && (strlen($this->container['gross_dim_x']) < 0)) {
            $invalidProperties[] = "invalid value for 'gross_dim_x', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gross_dim_y']) && (strlen($this->container['gross_dim_y']) > 36)) {
            $invalidProperties[] = "invalid value for 'gross_dim_y', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['gross_dim_y']) && (strlen($this->container['gross_dim_y']) < 0)) {
            $invalidProperties[] = "invalid value for 'gross_dim_y', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gross_dim_z']) && (strlen($this->container['gross_dim_z']) > 36)) {
            $invalidProperties[] = "invalid value for 'gross_dim_z', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['gross_dim_z']) && (strlen($this->container['gross_dim_z']) < 0)) {
            $invalidProperties[] = "invalid value for 'gross_dim_z', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customs_tariff_number']) && (strlen($this->container['customs_tariff_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'customs_tariff_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['customs_tariff_number']) && (strlen($this->container['customs_tariff_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customs_tariff_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['deeplink'] === null) {
            $invalidProperties[] = "'deeplink' can't be null";
        }
        if ((strlen($this->container['deeplink']) > 2048)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be smaller than or equal to 2048.";
        }

        if ((strlen($this->container['deeplink']) < 0)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['standard_html_datasheet'] === null) {
            $invalidProperties[] = "'standard_html_datasheet' can't be null";
        }
        if ((strlen($this->container['standard_html_datasheet']) > 2048)) {
            $invalidProperties[] = "invalid value for 'standard_html_datasheet', the character length must be smaller than or equal to 2048.";
        }

        if ((strlen($this->container['standard_html_datasheet']) < 0)) {
            $invalidProperties[] = "invalid value for 'standard_html_datasheet', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['standard_pdf_datasheet']) && (strlen($this->container['standard_pdf_datasheet']) > 2048)) {
            $invalidProperties[] = "invalid value for 'standard_pdf_datasheet', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['standard_pdf_datasheet']) && (strlen($this->container['standard_pdf_datasheet']) < 0)) {
            $invalidProperties[] = "invalid value for 'standard_pdf_datasheet', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturer_site']) && (strlen($this->container['manufacturer_site']) > 255)) {
            $invalidProperties[] = "invalid value for 'manufacturer_site', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['manufacturer_site']) && (strlen($this->container['manufacturer_site']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_site', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturer_datasheet']) && (strlen($this->container['manufacturer_datasheet']) > 1024)) {
            $invalidProperties[] = "invalid value for 'manufacturer_datasheet', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['manufacturer_datasheet']) && (strlen($this->container['manufacturer_datasheet']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_datasheet', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image_thumb']) && (strlen($this->container['image_thumb']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image_thumb', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image_thumb']) && (strlen($this->container['image_thumb']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_thumb', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image1']) && (strlen($this->container['image1']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image1', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image1']) && (strlen($this->container['image1']) < 0)) {
            $invalidProperties[] = "invalid value for 'image1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image2']) && (strlen($this->container['image2']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image2', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image2']) && (strlen($this->container['image2']) < 0)) {
            $invalidProperties[] = "invalid value for 'image2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image3']) && (strlen($this->container['image3']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image3', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image3']) && (strlen($this->container['image3']) < 0)) {
            $invalidProperties[] = "invalid value for 'image3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image4']) && (strlen($this->container['image4']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image4', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image4']) && (strlen($this->container['image4']) < 0)) {
            $invalidProperties[] = "invalid value for 'image4', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image5']) && (strlen($this->container['image5']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image5', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image5']) && (strlen($this->container['image5']) < 0)) {
            $invalidProperties[] = "invalid value for 'image5', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['energy_label']) && (strlen($this->container['energy_label']) > 1024)) {
            $invalidProperties[] = "invalid value for 'energy_label', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['energy_label']) && (strlen($this->container['energy_label']) < 0)) {
            $invalidProperties[] = "invalid value for 'energy_label', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['entry_date'] === null) {
            $invalidProperties[] = "'entry_date' can't be null";
        }
        if ($this->container['aggregated_status'] === null) {
            $invalidProperties[] = "'aggregated_status' can't be null";
        }
        if ($this->container['aggregated_status_text'] === null) {
            $invalidProperties[] = "'aggregated_status_text' can't be null";
        }
        if ((strlen($this->container['aggregated_status_text']) > 20)) {
            $invalidProperties[] = "invalid value for 'aggregated_status_text', the character length must be smaller than or equal to 20.";
        }

        if ((strlen($this->container['aggregated_status_text']) < 0)) {
            $invalidProperties[] = "invalid value for 'aggregated_status_text', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['aggregated_stock'] === null) {
            $invalidProperties[] = "'aggregated_stock' can't be null";
        }
        if ($this->container['aggregated_supplier_items'] === null) {
            $invalidProperties[] = "'aggregated_supplier_items' can't be null";
        }
        if ($this->container['supplier_item'] === null) {
            $invalidProperties[] = "'supplier_item' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['puid'] === null) {
            return false;
        }
        if (strlen($this->container['ean']) > 18) {
            return false;
        }
        if (strlen($this->container['ean']) < 0) {
            return false;
        }
        if (strlen($this->container['manufacturer_sku']) > 40) {
            return false;
        }
        if (strlen($this->container['manufacturer_sku']) < 0) {
            return false;
        }
        if (strlen($this->container['icecat_id']) > 255) {
            return false;
        }
        if (strlen($this->container['icecat_id']) < 0) {
            return false;
        }
        if (strlen($this->container['cnet_id']) > 255) {
            return false;
        }
        if (strlen($this->container['cnet_id']) < 0) {
            return false;
        }
        if (strlen($this->container['bechlem_id']) > 255) {
            return false;
        }
        if (strlen($this->container['bechlem_id']) < 0) {
            return false;
        }
        if (strlen($this->container['e_class']) > 11) {
            return false;
        }
        if (strlen($this->container['e_class']) < 0) {
            return false;
        }
        if ($this->container['manufacturer_id'] === null) {
            return false;
        }
        if (strlen($this->container['manufacturer_name']) > 255) {
            return false;
        }
        if (strlen($this->container['manufacturer_name']) < 0) {
            return false;
        }
        if ($this->container['product_name_with_manufacturer'] === null) {
            return false;
        }
        if ($this->container['product_type_id'] === null) {
            return false;
        }
        if ($this->container['product_type_group_id'] === null) {
            return false;
        }
        if ($this->container['product_type_group_name'] === null) {
            return false;
        }
        if ($this->container['product_type_name'] === null) {
            return false;
        }
        if (strlen($this->container['attribute_value1']) > 1024) {
            return false;
        }
        if (strlen($this->container['attribute_value1']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_value2']) > 1024) {
            return false;
        }
        if (strlen($this->container['attribute_value2']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_value3']) > 1024) {
            return false;
        }
        if (strlen($this->container['attribute_value3']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_value4']) > 1024) {
            return false;
        }
        if (strlen($this->container['attribute_value4']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_value5']) > 1024) {
            return false;
        }
        if (strlen($this->container['attribute_value5']) < 0) {
            return false;
        }
        if (strlen($this->container['product_sub_type_id']) > 1024) {
            return false;
        }
        if (strlen($this->container['product_sub_type_id']) < 0) {
            return false;
        }
        if (strlen($this->container['product_sub_type']) > 1024) {
            return false;
        }
        if (strlen($this->container['product_sub_type']) < 0) {
            return false;
        }
        if (strlen($this->container['product_line']) > 1024) {
            return false;
        }
        if (strlen($this->container['product_line']) < 0) {
            return false;
        }
        if (strlen($this->container['product_model']) > 1024) {
            return false;
        }
        if (strlen($this->container['product_model']) < 0) {
            return false;
        }
        if (strlen($this->container['gross_dim_x']) > 36) {
            return false;
        }
        if (strlen($this->container['gross_dim_x']) < 0) {
            return false;
        }
        if (strlen($this->container['gross_dim_y']) > 36) {
            return false;
        }
        if (strlen($this->container['gross_dim_y']) < 0) {
            return false;
        }
        if (strlen($this->container['gross_dim_z']) > 36) {
            return false;
        }
        if (strlen($this->container['gross_dim_z']) < 0) {
            return false;
        }
        if (strlen($this->container['customs_tariff_number']) > 255) {
            return false;
        }
        if (strlen($this->container['customs_tariff_number']) < 0) {
            return false;
        }
        if ($this->container['deeplink'] === null) {
            return false;
        }
        if (strlen($this->container['deeplink']) > 2048) {
            return false;
        }
        if (strlen($this->container['deeplink']) < 0) {
            return false;
        }
        if ($this->container['standard_html_datasheet'] === null) {
            return false;
        }
        if (strlen($this->container['standard_html_datasheet']) > 2048) {
            return false;
        }
        if (strlen($this->container['standard_html_datasheet']) < 0) {
            return false;
        }
        if (strlen($this->container['standard_pdf_datasheet']) > 2048) {
            return false;
        }
        if (strlen($this->container['standard_pdf_datasheet']) < 0) {
            return false;
        }
        if (strlen($this->container['manufacturer_site']) > 255) {
            return false;
        }
        if (strlen($this->container['manufacturer_site']) < 0) {
            return false;
        }
        if (strlen($this->container['manufacturer_datasheet']) > 1024) {
            return false;
        }
        if (strlen($this->container['manufacturer_datasheet']) < 0) {
            return false;
        }
        if (strlen($this->container['image_thumb']) > 1024) {
            return false;
        }
        if (strlen($this->container['image_thumb']) < 0) {
            return false;
        }
        if (strlen($this->container['image1']) > 1024) {
            return false;
        }
        if (strlen($this->container['image1']) < 0) {
            return false;
        }
        if (strlen($this->container['image2']) > 1024) {
            return false;
        }
        if (strlen($this->container['image2']) < 0) {
            return false;
        }
        if (strlen($this->container['image3']) > 1024) {
            return false;
        }
        if (strlen($this->container['image3']) < 0) {
            return false;
        }
        if (strlen($this->container['image4']) > 1024) {
            return false;
        }
        if (strlen($this->container['image4']) < 0) {
            return false;
        }
        if (strlen($this->container['image5']) > 1024) {
            return false;
        }
        if (strlen($this->container['image5']) < 0) {
            return false;
        }
        if (strlen($this->container['energy_label']) > 1024) {
            return false;
        }
        if (strlen($this->container['energy_label']) < 0) {
            return false;
        }
        if ($this->container['entry_date'] === null) {
            return false;
        }
        if ($this->container['aggregated_status'] === null) {
            return false;
        }
        if ($this->container['aggregated_status_text'] === null) {
            return false;
        }
        if (strlen($this->container['aggregated_status_text']) > 20) {
            return false;
        }
        if (strlen($this->container['aggregated_status_text']) < 0) {
            return false;
        }
        if ($this->container['aggregated_stock'] === null) {
            return false;
        }
        if ($this->container['aggregated_supplier_items'] === null) {
            return false;
        }
        if ($this->container['supplier_item'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets puid
     *
     * @return int
     */
    public function getPuid()
    {
        return $this->container['puid'];
    }

    /**
     * Sets puid
     *
     * @param int $puid Eindeutiger Key
     *
     * @return $this
     */
    public function setPuid($puid)
    {
        $this->container['puid'] = $puid;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean EAN
     *
     * @return $this
     */
    public function setEan($ean)
    {
        if (!is_null($ean) && (strlen($ean) > 18)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling Product., must be smaller than or equal to 18.');
        }
        if (!is_null($ean) && (strlen($ean) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets manufacturer_sku
     *
     * @return string
     */
    public function getManufacturerSku()
    {
        return $this->container['manufacturer_sku'];
    }

    /**
     * Sets manufacturer_sku
     *
     * @param string $manufacturer_sku Herstellerartikelnummer
     *
     * @return $this
     */
    public function setManufacturerSku($manufacturer_sku)
    {
        if (!is_null($manufacturer_sku) && (strlen($manufacturer_sku) > 40)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_sku when calling Product., must be smaller than or equal to 40.');
        }
        if (!is_null($manufacturer_sku) && (strlen($manufacturer_sku) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_sku when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_sku'] = $manufacturer_sku;

        return $this;
    }

    /**
     * Gets icecat_id
     *
     * @return string
     */
    public function getIcecatId()
    {
        return $this->container['icecat_id'];
    }

    /**
     * Sets icecat_id
     *
     * @param string $icecat_id IceCat ID
     *
     * @return $this
     */
    public function setIcecatId($icecat_id)
    {
        if (!is_null($icecat_id) && (strlen($icecat_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $icecat_id when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($icecat_id) && (strlen($icecat_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $icecat_id when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['icecat_id'] = $icecat_id;

        return $this;
    }

    /**
     * Gets cnet_id
     *
     * @return string
     */
    public function getCnetId()
    {
        return $this->container['cnet_id'];
    }

    /**
     * Sets cnet_id
     *
     * @param string $cnet_id CNET ID
     *
     * @return $this
     */
    public function setCnetId($cnet_id)
    {
        if (!is_null($cnet_id) && (strlen($cnet_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cnet_id when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($cnet_id) && (strlen($cnet_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cnet_id when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['cnet_id'] = $cnet_id;

        return $this;
    }

    /**
     * Gets bechlem_id
     *
     * @return string
     */
    public function getBechlemId()
    {
        return $this->container['bechlem_id'];
    }

    /**
     * Sets bechlem_id
     *
     * @param string $bechlem_id Bechlem ID
     *
     * @return $this
     */
    public function setBechlemId($bechlem_id)
    {
        if (!is_null($bechlem_id) && (strlen($bechlem_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bechlem_id when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($bechlem_id) && (strlen($bechlem_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bechlem_id when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['bechlem_id'] = $bechlem_id;

        return $this;
    }

    /**
     * Gets e_class
     *
     * @return string
     */
    public function getEClass()
    {
        return $this->container['e_class'];
    }

    /**
     * Sets e_class
     *
     * @param string $e_class eClass ID
     *
     * @return $this
     */
    public function setEClass($e_class)
    {
        if (!is_null($e_class) && (strlen($e_class) > 11)) {
            throw new \InvalidArgumentException('invalid length for $e_class when calling Product., must be smaller than or equal to 11.');
        }
        if (!is_null($e_class) && (strlen($e_class) < 0)) {
            throw new \InvalidArgumentException('invalid length for $e_class when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['e_class'] = $e_class;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return int
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param int $manufacturer_id Referenz auf den Hersteller dieses Produktes (n:1 auf Manufacturer.id)
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets manufacturer_name
     *
     * @return string
     */
    public function getManufacturerName()
    {
        return $this->container['manufacturer_name'];
    }

    /**
     * Sets manufacturer_name
     *
     * @param string $manufacturer_name Name des Herstellers
     *
     * @return $this
     */
    public function setManufacturerName($manufacturer_name)
    {
        if (!is_null($manufacturer_name) && (strlen($manufacturer_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_name when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($manufacturer_name) && (strlen($manufacturer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_name when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_name'] = $manufacturer_name;

        return $this;
    }

    /**
     * Gets product_name_with_manufacturer
     *
     * @return string
     */
    public function getProductNameWithManufacturer()
    {
        return $this->container['product_name_with_manufacturer'];
    }

    /**
     * Sets product_name_with_manufacturer
     *
     * @param string $product_name_with_manufacturer <a href=\"https://support.itscope.com/hc/de/articles/206554329\">Produktname</a>, inklusive Herstellername
     *
     * @return $this
     */
    public function setProductNameWithManufacturer($product_name_with_manufacturer)
    {
        $this->container['product_name_with_manufacturer'] = $product_name_with_manufacturer;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description <a href=\"https://support.itscope.com/hc/de/articles/206554329\">Kurzbezeichner</a> des Produktes
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description <a href=\"https://support.itscope.com/hc/de/articles/206554329\">Langtext</a> des Produktes
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets product_type_id
     *
     * @return int
     */
    public function getProductTypeId()
    {
        return $this->container['product_type_id'];
    }

    /**
     * Sets product_type_id
     *
     * @param int $product_type_id Referenz auf den Produkttyp dieses Produktes
     *
     * @return $this
     */
    public function setProductTypeId($product_type_id)
    {
        $this->container['product_type_id'] = $product_type_id;

        return $this;
    }

    /**
     * Gets product_type_group_id
     *
     * @return string
     */
    public function getProductTypeGroupId()
    {
        return $this->container['product_type_group_id'];
    }

    /**
     * Sets product_type_group_id
     *
     * @param string $product_type_group_id Referenz auf Produkttyp-Gruppe (ProductTypeGroup.id, n:1)
     *
     * @return $this
     */
    public function setProductTypeGroupId($product_type_group_id)
    {
        $this->container['product_type_group_id'] = $product_type_group_id;

        return $this;
    }

    /**
     * Gets product_type_group_name
     *
     * @return string
     */
    public function getProductTypeGroupName()
    {
        return $this->container['product_type_group_name'];
    }

    /**
     * Sets product_type_group_name
     *
     * @param string $product_type_group_name Name der Gruppe von Produkttypen, z.B. Netzwerktechnik. Kann als 1. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setProductTypeGroupName($product_type_group_name)
    {
        $this->container['product_type_group_name'] = $product_type_group_name;

        return $this;
    }

    /**
     * Gets product_type_name
     *
     * @return string
     */
    public function getProductTypeName()
    {
        return $this->container['product_type_name'];
    }

    /**
     * Sets product_type_name
     *
     * @param string $product_type_name Bezeichner des Produkttyps. Kann als 2. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setProductTypeName($product_type_name)
    {
        $this->container['product_type_name'] = $product_type_name;

        return $this;
    }

    /**
     * Gets attribute_type_id1
     *
     * @return int
     */
    public function getAttributeTypeId1()
    {
        return $this->container['attribute_type_id1'];
    }

    /**
     * Sets attribute_type_id1
     *
     * @param int $attribute_type_id1 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId1($attribute_type_id1)
    {
        $this->container['attribute_type_id1'] = $attribute_type_id1;

        return $this;
    }

    /**
     * Gets attribute_type_name1
     *
     * @return string
     */
    public function getAttributeTypeName1()
    {
        return $this->container['attribute_type_name1'];
    }

    /**
     * Sets attribute_type_name1
     *
     * @param string $attribute_type_name1 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName1($attribute_type_name1)
    {
        $this->container['attribute_type_name1'] = $attribute_type_name1;

        return $this;
    }

    /**
     * Gets attribute_type_id2
     *
     * @return int
     */
    public function getAttributeTypeId2()
    {
        return $this->container['attribute_type_id2'];
    }

    /**
     * Sets attribute_type_id2
     *
     * @param int $attribute_type_id2 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId2($attribute_type_id2)
    {
        $this->container['attribute_type_id2'] = $attribute_type_id2;

        return $this;
    }

    /**
     * Gets attribute_type_name2
     *
     * @return string
     */
    public function getAttributeTypeName2()
    {
        return $this->container['attribute_type_name2'];
    }

    /**
     * Sets attribute_type_name2
     *
     * @param string $attribute_type_name2 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName2($attribute_type_name2)
    {
        $this->container['attribute_type_name2'] = $attribute_type_name2;

        return $this;
    }

    /**
     * Gets attribute_type_id3
     *
     * @return int
     */
    public function getAttributeTypeId3()
    {
        return $this->container['attribute_type_id3'];
    }

    /**
     * Sets attribute_type_id3
     *
     * @param int $attribute_type_id3 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId3($attribute_type_id3)
    {
        $this->container['attribute_type_id3'] = $attribute_type_id3;

        return $this;
    }

    /**
     * Gets attribute_type_name3
     *
     * @return string
     */
    public function getAttributeTypeName3()
    {
        return $this->container['attribute_type_name3'];
    }

    /**
     * Sets attribute_type_name3
     *
     * @param string $attribute_type_name3 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName3($attribute_type_name3)
    {
        $this->container['attribute_type_name3'] = $attribute_type_name3;

        return $this;
    }

    /**
     * Gets attribute_type_id4
     *
     * @return int
     */
    public function getAttributeTypeId4()
    {
        return $this->container['attribute_type_id4'];
    }

    /**
     * Sets attribute_type_id4
     *
     * @param int $attribute_type_id4 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId4($attribute_type_id4)
    {
        $this->container['attribute_type_id4'] = $attribute_type_id4;

        return $this;
    }

    /**
     * Gets attribute_type_name4
     *
     * @return string
     */
    public function getAttributeTypeName4()
    {
        return $this->container['attribute_type_name4'];
    }

    /**
     * Sets attribute_type_name4
     *
     * @param string $attribute_type_name4 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName4($attribute_type_name4)
    {
        $this->container['attribute_type_name4'] = $attribute_type_name4;

        return $this;
    }

    /**
     * Gets attribute_type_id5
     *
     * @return int
     */
    public function getAttributeTypeId5()
    {
        return $this->container['attribute_type_id5'];
    }

    /**
     * Sets attribute_type_id5
     *
     * @param int $attribute_type_id5 Eindeutiger Attribut Key, um eine mögliche Unterkategorie aufzubauen, verweist 1:n auf AttributeCluster.attributeTypeId
     *
     * @return $this
     */
    public function setAttributeTypeId5($attribute_type_id5)
    {
        $this->container['attribute_type_id5'] = $attribute_type_id5;

        return $this;
    }

    /**
     * Gets attribute_type_name5
     *
     * @return string
     */
    public function getAttributeTypeName5()
    {
        return $this->container['attribute_type_name5'];
    }

    /**
     * Sets attribute_type_name5
     *
     * @param string $attribute_type_name5 Bezeichner des Attributes, um eine mögliche Unterkategorie aufzubauen
     *
     * @return $this
     */
    public function setAttributeTypeName5($attribute_type_name5)
    {
        $this->container['attribute_type_name5'] = $attribute_type_name5;

        return $this;
    }

    /**
     * Gets attribute_value1
     *
     * @return string
     */
    public function getAttributeValue1()
    {
        return $this->container['attribute_value1'];
    }

    /**
     * Sets attribute_value1
     *
     * @param string $attribute_value1 Eigenschaftswert für das Attribut aus ProductType.attributeTypeId1. Kann, falls vorhanden, als 3. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setAttributeValue1($attribute_value1)
    {
        if (!is_null($attribute_value1) && (strlen($attribute_value1) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value1 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($attribute_value1) && (strlen($attribute_value1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value1 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['attribute_value1'] = $attribute_value1;

        return $this;
    }

    /**
     * Gets attribute_value2
     *
     * @return string
     */
    public function getAttributeValue2()
    {
        return $this->container['attribute_value2'];
    }

    /**
     * Sets attribute_value2
     *
     * @param string $attribute_value2 Eigenschaftswert für das Attribut aus ProductType.attributeTypeId2. Kann, falls vorhanden, als 4. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setAttributeValue2($attribute_value2)
    {
        if (!is_null($attribute_value2) && (strlen($attribute_value2) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value2 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($attribute_value2) && (strlen($attribute_value2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value2 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['attribute_value2'] = $attribute_value2;

        return $this;
    }

    /**
     * Gets attribute_value3
     *
     * @return string
     */
    public function getAttributeValue3()
    {
        return $this->container['attribute_value3'];
    }

    /**
     * Sets attribute_value3
     *
     * @param string $attribute_value3 Eigenschaftswert für das Attribut aus ProductType.attributeTypeId3. Kann, falls vorhanden, als 5. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setAttributeValue3($attribute_value3)
    {
        if (!is_null($attribute_value3) && (strlen($attribute_value3) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value3 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($attribute_value3) && (strlen($attribute_value3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value3 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['attribute_value3'] = $attribute_value3;

        return $this;
    }

    /**
     * Gets attribute_value4
     *
     * @return string
     */
    public function getAttributeValue4()
    {
        return $this->container['attribute_value4'];
    }

    /**
     * Sets attribute_value4
     *
     * @param string $attribute_value4 Eigenschaftswert für das Attribut aus ProductType.attributeTypeId4
     *
     * @return $this
     */
    public function setAttributeValue4($attribute_value4)
    {
        if (!is_null($attribute_value4) && (strlen($attribute_value4) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value4 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($attribute_value4) && (strlen($attribute_value4) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value4 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['attribute_value4'] = $attribute_value4;

        return $this;
    }

    /**
     * Gets attribute_value5
     *
     * @return string
     */
    public function getAttributeValue5()
    {
        return $this->container['attribute_value5'];
    }

    /**
     * Sets attribute_value5
     *
     * @param string $attribute_value5 Eigenschaftswert für das Attribut aus ProductType.attributeTypeId5
     *
     * @return $this
     */
    public function setAttributeValue5($attribute_value5)
    {
        if (!is_null($attribute_value5) && (strlen($attribute_value5) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value5 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($attribute_value5) && (strlen($attribute_value5) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value5 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['attribute_value5'] = $attribute_value5;

        return $this;
    }

    /**
     * Gets product_sub_type_id
     *
     * @return string
     */
    public function getProductSubTypeId()
    {
        return $this->container['product_sub_type_id'];
    }

    /**
     * Sets product_sub_type_id
     *
     * @param string $product_sub_type_id ID der Bauart-Eigenschaft
     *
     * @return $this
     */
    public function setProductSubTypeId($product_sub_type_id)
    {
        if (!is_null($product_sub_type_id) && (strlen($product_sub_type_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $product_sub_type_id when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($product_sub_type_id) && (strlen($product_sub_type_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_sub_type_id when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['product_sub_type_id'] = $product_sub_type_id;

        return $this;
    }

    /**
     * Gets product_sub_type
     *
     * @return string
     */
    public function getProductSubType()
    {
        return $this->container['product_sub_type'];
    }

    /**
     * Sets product_sub_type
     *
     * @param string $product_sub_type Bauart-Eigenschaft des Produktes, z.B. Maus oder Tastatur für Eingabegeräte. Sollte <b>nicht</b> als 3. <a href=\"https://support.itscope.com/hc/de/articles/207249385\">Kategorieebene</a> verwendet werden.
     *
     * @return $this
     */
    public function setProductSubType($product_sub_type)
    {
        if (!is_null($product_sub_type) && (strlen($product_sub_type) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $product_sub_type when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($product_sub_type) && (strlen($product_sub_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_sub_type when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['product_sub_type'] = $product_sub_type;

        return $this;
    }

    /**
     * Gets product_line_id
     *
     * @return int
     */
    public function getProductLineId()
    {
        return $this->container['product_line_id'];
    }

    /**
     * Sets product_line_id
     *
     * @param int $product_line_id ID der Produktlinie
     *
     * @return $this
     */
    public function setProductLineId($product_line_id)
    {
        $this->container['product_line_id'] = $product_line_id;

        return $this;
    }

    /**
     * Gets product_line
     *
     * @return string
     */
    public function getProductLine()
    {
        return $this->container['product_line'];
    }

    /**
     * Sets product_line
     *
     * @param string $product_line Produktlinie
     *
     * @return $this
     */
    public function setProductLine($product_line)
    {
        if (!is_null($product_line) && (strlen($product_line) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $product_line when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($product_line) && (strlen($product_line) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_line when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['product_line'] = $product_line;

        return $this;
    }

    /**
     * Gets product_model
     *
     * @return string
     */
    public function getProductModel()
    {
        return $this->container['product_model'];
    }

    /**
     * Sets product_model
     *
     * @param string $product_model Produktmodellbezeichner
     *
     * @return $this
     */
    public function setProductModel($product_model)
    {
        if (!is_null($product_model) && (strlen($product_model) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $product_model when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($product_model) && (strlen($product_model) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_model when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['product_model'] = $product_model;

        return $this;
    }

    /**
     * Gets estimate_gross_weight
     *
     * @return double
     */
    public function getEstimateGrossWeight()
    {
        return $this->container['estimate_gross_weight'];
    }

    /**
     * Sets estimate_gross_weight
     *
     * @param double $estimate_gross_weight Gewicht in Kilogramm
     *
     * @return $this
     */
    public function setEstimateGrossWeight($estimate_gross_weight)
    {
        $this->container['estimate_gross_weight'] = $estimate_gross_weight;

        return $this;
    }

    /**
     * Gets gross_dim_x
     *
     * @return string
     */
    public function getGrossDimX()
    {
        return $this->container['gross_dim_x'];
    }

    /**
     * Sets gross_dim_x
     *
     * @param string $gross_dim_x Länge des Produkts inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimX($gross_dim_x)
    {
        if (!is_null($gross_dim_x) && (strlen($gross_dim_x) > 36)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_x when calling Product., must be smaller than or equal to 36.');
        }
        if (!is_null($gross_dim_x) && (strlen($gross_dim_x) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_x when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['gross_dim_x'] = $gross_dim_x;

        return $this;
    }

    /**
     * Gets gross_dim_y
     *
     * @return string
     */
    public function getGrossDimY()
    {
        return $this->container['gross_dim_y'];
    }

    /**
     * Sets gross_dim_y
     *
     * @param string $gross_dim_y Höhe des Produks inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimY($gross_dim_y)
    {
        if (!is_null($gross_dim_y) && (strlen($gross_dim_y) > 36)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_y when calling Product., must be smaller than or equal to 36.');
        }
        if (!is_null($gross_dim_y) && (strlen($gross_dim_y) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_y when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['gross_dim_y'] = $gross_dim_y;

        return $this;
    }

    /**
     * Gets gross_dim_z
     *
     * @return string
     */
    public function getGrossDimZ()
    {
        return $this->container['gross_dim_z'];
    }

    /**
     * Sets gross_dim_z
     *
     * @param string $gross_dim_z Breite des Produkts inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimZ($gross_dim_z)
    {
        if (!is_null($gross_dim_z) && (strlen($gross_dim_z) > 36)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_z when calling Product., must be smaller than or equal to 36.');
        }
        if (!is_null($gross_dim_z) && (strlen($gross_dim_z) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gross_dim_z when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['gross_dim_z'] = $gross_dim_z;

        return $this;
    }

    /**
     * Gets customs_tariff_number
     *
     * @return string
     */
    public function getCustomsTariffNumber()
    {
        return $this->container['customs_tariff_number'];
    }

    /**
     * Sets customs_tariff_number
     *
     * @param string $customs_tariff_number Zolltarifnummer
     *
     * @return $this
     */
    public function setCustomsTariffNumber($customs_tariff_number)
    {
        if (!is_null($customs_tariff_number) && (strlen($customs_tariff_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customs_tariff_number when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($customs_tariff_number) && (strlen($customs_tariff_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customs_tariff_number when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['customs_tariff_number'] = $customs_tariff_number;

        return $this;
    }

    /**
     * Gets deeplink
     *
     * @return string
     */
    public function getDeeplink()
    {
        return $this->container['deeplink'];
    }

    /**
     * Sets deeplink
     *
     * @param string $deeplink Deeplink auf die ITscope.com Plattform
     *
     * @return $this
     */
    public function setDeeplink($deeplink)
    {
        if ((strlen($deeplink) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling Product., must be smaller than or equal to 2048.');
        }
        if ((strlen($deeplink) < 0)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['deeplink'] = $deeplink;

        return $this;
    }

    /**
     * Gets standard_html_datasheet
     *
     * @return string
     */
    public function getStandardHtmlDatasheet()
    {
        return $this->container['standard_html_datasheet'];
    }

    /**
     * Sets standard_html_datasheet
     *
     * @param string $standard_html_datasheet URL, Link auf HTML Standard-Datenblatt
     *
     * @return $this
     */
    public function setStandardHtmlDatasheet($standard_html_datasheet)
    {
        if ((strlen($standard_html_datasheet) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $standard_html_datasheet when calling Product., must be smaller than or equal to 2048.');
        }
        if ((strlen($standard_html_datasheet) < 0)) {
            throw new \InvalidArgumentException('invalid length for $standard_html_datasheet when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['standard_html_datasheet'] = $standard_html_datasheet;

        return $this;
    }

    /**
     * Gets standard_pdf_datasheet
     *
     * @return string
     */
    public function getStandardPdfDatasheet()
    {
        return $this->container['standard_pdf_datasheet'];
    }

    /**
     * Sets standard_pdf_datasheet
     *
     * @param string $standard_pdf_datasheet URL, Link auf PDF Standard-Datenblatt
     *
     * @return $this
     */
    public function setStandardPdfDatasheet($standard_pdf_datasheet)
    {
        if (!is_null($standard_pdf_datasheet) && (strlen($standard_pdf_datasheet) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $standard_pdf_datasheet when calling Product., must be smaller than or equal to 2048.');
        }
        if (!is_null($standard_pdf_datasheet) && (strlen($standard_pdf_datasheet) < 0)) {
            throw new \InvalidArgumentException('invalid length for $standard_pdf_datasheet when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['standard_pdf_datasheet'] = $standard_pdf_datasheet;

        return $this;
    }

    /**
     * Gets manufacturer_site
     *
     * @return string
     */
    public function getManufacturerSite()
    {
        return $this->container['manufacturer_site'];
    }

    /**
     * Sets manufacturer_site
     *
     * @param string $manufacturer_site URL, Link auf Herstellerseite
     *
     * @return $this
     */
    public function setManufacturerSite($manufacturer_site)
    {
        if (!is_null($manufacturer_site) && (strlen($manufacturer_site) > 255)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_site when calling Product., must be smaller than or equal to 255.');
        }
        if (!is_null($manufacturer_site) && (strlen($manufacturer_site) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_site when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_site'] = $manufacturer_site;

        return $this;
    }

    /**
     * Gets manufacturer_datasheet
     *
     * @return string
     */
    public function getManufacturerDatasheet()
    {
        return $this->container['manufacturer_datasheet'];
    }

    /**
     * Sets manufacturer_datasheet
     *
     * @param string $manufacturer_datasheet URL, Link auf Herstellerdatenblatt
     *
     * @return $this
     */
    public function setManufacturerDatasheet($manufacturer_datasheet)
    {
        if (!is_null($manufacturer_datasheet) && (strlen($manufacturer_datasheet) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_datasheet when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($manufacturer_datasheet) && (strlen($manufacturer_datasheet) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_datasheet when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_datasheet'] = $manufacturer_datasheet;

        return $this;
    }

    /**
     * Gets image_thumb
     *
     * @return string
     */
    public function getImageThumb()
    {
        return $this->container['image_thumb'];
    }

    /**
     * Sets image_thumb
     *
     * @param string $image_thumb Vorschau des besten <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Produktbildes</a>
     *
     * @return $this
     */
    public function setImageThumb($image_thumb)
    {
        if (!is_null($image_thumb) && (strlen($image_thumb) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image_thumb when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image_thumb) && (strlen($image_thumb) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_thumb when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image_thumb'] = $image_thumb;

        return $this;
    }

    /**
     * Gets image_thumb_width
     *
     * @return int
     */
    public function getImageThumbWidth()
    {
        return $this->container['image_thumb_width'];
    }

    /**
     * Sets image_thumb_width
     *
     * @param int $image_thumb_width Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageThumbWidth($image_thumb_width)
    {
        $this->container['image_thumb_width'] = $image_thumb_width;

        return $this;
    }

    /**
     * Gets image_thumb_height
     *
     * @return int
     */
    public function getImageThumbHeight()
    {
        return $this->container['image_thumb_height'];
    }

    /**
     * Sets image_thumb_height
     *
     * @param int $image_thumb_height Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageThumbHeight($image_thumb_height)
    {
        $this->container['image_thumb_height'] = $image_thumb_height;

        return $this;
    }

    /**
     * Gets image1
     *
     * @return string
     */
    public function getImage1()
    {
        return $this->container['image1'];
    }

    /**
     * Sets image1
     *
     * @param string $image1 Link auf bestmögliches <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Bild</a>, in der größten Ausführung
     *
     * @return $this
     */
    public function setImage1($image1)
    {
        if (!is_null($image1) && (strlen($image1) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image1 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image1) && (strlen($image1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image1 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image1'] = $image1;

        return $this;
    }

    /**
     * Gets image_width1
     *
     * @return int
     */
    public function getImageWidth1()
    {
        return $this->container['image_width1'];
    }

    /**
     * Sets image_width1
     *
     * @param int $image_width1 Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageWidth1($image_width1)
    {
        $this->container['image_width1'] = $image_width1;

        return $this;
    }

    /**
     * Gets image_height1
     *
     * @return int
     */
    public function getImageHeight1()
    {
        return $this->container['image_height1'];
    }

    /**
     * Sets image_height1
     *
     * @param int $image_height1 Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageHeight1($image_height1)
    {
        $this->container['image_height1'] = $image_height1;

        return $this;
    }

    /**
     * Gets image2
     *
     * @return string
     */
    public function getImage2()
    {
        return $this->container['image2'];
    }

    /**
     * Sets image2
     *
     * @param string $image2 Link auf ein weiteres gutes <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Produktbild</a>, bevorzugt das einer Produktverpackung (nie das gleiche wie das erste Bild)
     *
     * @return $this
     */
    public function setImage2($image2)
    {
        if (!is_null($image2) && (strlen($image2) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image2 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image2) && (strlen($image2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image2 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image2'] = $image2;

        return $this;
    }

    /**
     * Gets image_width2
     *
     * @return int
     */
    public function getImageWidth2()
    {
        return $this->container['image_width2'];
    }

    /**
     * Sets image_width2
     *
     * @param int $image_width2 Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageWidth2($image_width2)
    {
        $this->container['image_width2'] = $image_width2;

        return $this;
    }

    /**
     * Gets image_height2
     *
     * @return int
     */
    public function getImageHeight2()
    {
        return $this->container['image_height2'];
    }

    /**
     * Sets image_height2
     *
     * @param int $image_height2 Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageHeight2($image_height2)
    {
        $this->container['image_height2'] = $image_height2;

        return $this;
    }

    /**
     * Gets image3
     *
     * @return string
     */
    public function getImage3()
    {
        return $this->container['image3'];
    }

    /**
     * Sets image3
     *
     * @param string $image3 Link auf erstes <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Bild</a> in der Galerie (niemals eines der bereits aufgeführten)
     *
     * @return $this
     */
    public function setImage3($image3)
    {
        if (!is_null($image3) && (strlen($image3) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image3 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image3) && (strlen($image3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image3 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image3'] = $image3;

        return $this;
    }

    /**
     * Gets image_width3
     *
     * @return int
     */
    public function getImageWidth3()
    {
        return $this->container['image_width3'];
    }

    /**
     * Sets image_width3
     *
     * @param int $image_width3 Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageWidth3($image_width3)
    {
        $this->container['image_width3'] = $image_width3;

        return $this;
    }

    /**
     * Gets image_height3
     *
     * @return int
     */
    public function getImageHeight3()
    {
        return $this->container['image_height3'];
    }

    /**
     * Sets image_height3
     *
     * @param int $image_height3 Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageHeight3($image_height3)
    {
        $this->container['image_height3'] = $image_height3;

        return $this;
    }

    /**
     * Gets image4
     *
     * @return string
     */
    public function getImage4()
    {
        return $this->container['image4'];
    }

    /**
     * Sets image4
     *
     * @param string $image4 Link auf zweites <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Bild</a> in der Galerie (niemals eines der bereits aufgeführten)
     *
     * @return $this
     */
    public function setImage4($image4)
    {
        if (!is_null($image4) && (strlen($image4) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image4 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image4) && (strlen($image4) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image4 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image4'] = $image4;

        return $this;
    }

    /**
     * Gets image_width4
     *
     * @return int
     */
    public function getImageWidth4()
    {
        return $this->container['image_width4'];
    }

    /**
     * Sets image_width4
     *
     * @param int $image_width4 Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageWidth4($image_width4)
    {
        $this->container['image_width4'] = $image_width4;

        return $this;
    }

    /**
     * Gets image_height4
     *
     * @return int
     */
    public function getImageHeight4()
    {
        return $this->container['image_height4'];
    }

    /**
     * Sets image_height4
     *
     * @param int $image_height4 Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageHeight4($image_height4)
    {
        $this->container['image_height4'] = $image_height4;

        return $this;
    }

    /**
     * Gets image5
     *
     * @return string
     */
    public function getImage5()
    {
        return $this->container['image5'];
    }

    /**
     * Sets image5
     *
     * @param string $image5 Link auf drittes <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Bild</a> in der Galerie (niemals eines der bereits aufgeführten)
     *
     * @return $this
     */
    public function setImage5($image5)
    {
        if (!is_null($image5) && (strlen($image5) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image5 when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($image5) && (strlen($image5) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image5 when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['image5'] = $image5;

        return $this;
    }

    /**
     * Gets image_width5
     *
     * @return int
     */
    public function getImageWidth5()
    {
        return $this->container['image_width5'];
    }

    /**
     * Sets image_width5
     *
     * @param int $image_width5 Breite des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageWidth5($image_width5)
    {
        $this->container['image_width5'] = $image_width5;

        return $this;
    }

    /**
     * Gets image_height5
     *
     * @return int
     */
    public function getImageHeight5()
    {
        return $this->container['image_height5'];
    }

    /**
     * Sets image_height5
     *
     * @param int $image_height5 Höhe des Bild Mediums in Pixel
     *
     * @return $this
     */
    public function setImageHeight5($image_height5)
    {
        $this->container['image_height5'] = $image_height5;

        return $this;
    }

    /**
     * Gets energy_label
     *
     * @return string
     */
    public function getEnergyLabel()
    {
        return $this->container['energy_label'];
    }

    /**
     * Sets energy_label
     *
     * @param string $energy_label Link auf das Energielabel <a href=\"https://support.itscope.com/hc/de/articles/206430869\">Bild</a>
     *
     * @return $this
     */
    public function setEnergyLabel($energy_label)
    {
        if (!is_null($energy_label) && (strlen($energy_label) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $energy_label when calling Product., must be smaller than or equal to 1024.');
        }
        if (!is_null($energy_label) && (strlen($energy_label) < 0)) {
            throw new \InvalidArgumentException('invalid length for $energy_label when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['energy_label'] = $energy_label;

        return $this;
    }

    /**
     * Gets entry_date
     *
     * @return \DateTime
     */
    public function getEntryDate()
    {
        return $this->container['entry_date'];
    }

    /**
     * Sets entry_date
     *
     * @param \DateTime $entry_date Ab wann ist das Produkt auf der Plattform
     *
     * @return $this
     */
    public function setEntryDate($entry_date)
    {
        $this->container['entry_date'] = $entry_date;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank Allgemeiner Beliebtheitsrang (Rang 1 bis n, eine hohe Zahl entspricht einem schlechten Ranking)
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets qualification
     *
     * @return int
     */
    public function getQualification()
    {
        return $this->container['qualification'];
    }

    /**
     * Sets qualification
     *
     * @param int $qualification <a href=\"https://support.itscope.com/hc/de/articles/206032562\">Qualifizierung des Produkts</a>
     *
     * @return $this
     */
    public function setQualification($qualification)
    {
        $this->container['qualification'] = $qualification;

        return $this;
    }

    /**
     * Gets warranty_text
     *
     * @return string
     */
    public function getWarrantyText()
    {
        return $this->container['warranty_text'];
    }

    /**
     * Sets warranty_text
     *
     * @param string $warranty_text <a href=\"https://support.itscope.com/hc/de/articles/206554329\">Garantietext</a> des Produktes
     *
     * @return $this
     */
    public function setWarrantyText($warranty_text)
    {
        $this->container['warranty_text'] = $warranty_text;

        return $this;
    }

    /**
     * Gets marketing_text
     *
     * @return string
     */
    public function getMarketingText()
    {
        return $this->container['marketing_text'];
    }

    /**
     * Sets marketing_text
     *
     * @param string $marketing_text <a href=\"https://support.itscope.com/hc/de/articles/206554329\">Marketingtext</a> für das Produkt
     *
     * @return $this
     */
    public function setMarketingText($marketing_text)
    {
        $this->container['marketing_text'] = $marketing_text;

        return $this;
    }

    /**
     * Gets html_specs
     *
     * @return string
     */
    public function getHtmlSpecs()
    {
        return $this->container['html_specs'];
    }

    /**
     * Sets html_specs
     *
     * @param string $html_specs <a href=\"https://support.itscope.com/hc/de/articles/206525469\">Technische Eigenschaften</a> des Produktes, im HTML Format
     *
     * @return $this
     */
    public function setHtmlSpecs($html_specs)
    {
        $this->container['html_specs'] = $html_specs;

        return $this;
    }

    /**
     * Gets recommended_retail_price_net
     *
     * @return double
     */
    public function getRecommendedRetailPriceNet()
    {
        return $this->container['recommended_retail_price_net'];
    }

    /**
     * Sets recommended_retail_price_net
     *
     * @param double $recommended_retail_price_net UVP des Herstellers
     *
     * @return $this
     */
    public function setRecommendedRetailPriceNet($recommended_retail_price_net)
    {
        $this->container['recommended_retail_price_net'] = $recommended_retail_price_net;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Preisbasis für den <a href=\"https://support.itscope.com/hc/de/articles/206156619\">kalkulierten Preis</a>
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_calc
     *
     * @return double
     */
    public function getPriceCalc()
    {
        return $this->container['price_calc'];
    }

    /**
     * Sets price_calc
     *
     * @param double $price_calc Kalkulierter Preis, auf Grundlage der individuellen <a href=\"https://support.itscope.com/hc/de/sections/201887801\">Preiskalkulation</a>
     *
     * @return $this
     */
    public function setPriceCalc($price_calc)
    {
        $this->container['price_calc'] = $price_calc;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Währungseinheit, die für diese Preisinformation gilt
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets price_calc_vat
     *
     * @return double
     */
    public function getPriceCalcVat()
    {
        return $this->container['price_calc_vat'];
    }

    /**
     * Sets price_calc_vat
     *
     * @param double $price_calc_vat Umsatzsteuersatz, der zur Berechnung des <a href=\"https://support.itscope.com/hc/de/articles/206156619\">kalkulierten Preises</a> benutzt wurde
     *
     * @return $this
     */
    public function setPriceCalcVat($price_calc_vat)
    {
        $this->container['price_calc_vat'] = $price_calc_vat;

        return $this;
    }

    /**
     * Gets price_last_update
     *
     * @return \DateTime
     */
    public function getPriceLastUpdate()
    {
        return $this->container['price_last_update'];
    }

    /**
     * Sets price_last_update
     *
     * @param \DateTime $price_last_update Zeitpunkt der letzten Aktualisierungs der Preisinformation
     *
     * @return $this
     */
    public function setPriceLastUpdate($price_last_update)
    {
        $this->container['price_last_update'] = $price_last_update;

        return $this;
    }

    /**
     * Gets price_supplier_id
     *
     * @return int
     */
    public function getPriceSupplierId()
    {
        return $this->container['price_supplier_id'];
    }

    /**
     * Sets price_supplier_id
     *
     * @param int $price_supplier_id Referenz auf einen Lieferanten (1:1), der die Bezugsquelle mit dieser Preisinformation bereitgestellt hat
     *
     * @return $this
     */
    public function setPriceSupplierId($price_supplier_id)
    {
        $this->container['price_supplier_id'] = $price_supplier_id;

        return $this;
    }

    /**
     * Gets price_supplier_name
     *
     * @return string
     */
    public function getPriceSupplierName()
    {
        return $this->container['price_supplier_name'];
    }

    /**
     * Sets price_supplier_name
     *
     * @param string $price_supplier_name Name des Lieferanten, der diese Bezugsquelle bereitgestellt hat
     *
     * @return $this
     */
    public function setPriceSupplierName($price_supplier_name)
    {
        $this->container['price_supplier_name'] = $price_supplier_name;

        return $this;
    }

    /**
     * Gets price_supplier_item_id
     *
     * @return int
     */
    public function getPriceSupplierItemId()
    {
        return $this->container['price_supplier_item_id'];
    }

    /**
     * Sets price_supplier_item_id
     *
     * @param int $price_supplier_item_id Referenz auf eine Bezugsquelle (n:1); wenn dieses Feld null ist, dann bezieht sich die Preisinformation auf ein Produkt (Bezugsquellenrefernz und Produktrefernz schließen sich gegenseitig aus)
     *
     * @return $this
     */
    public function setPriceSupplierItemId($price_supplier_item_id)
    {
        $this->container['price_supplier_item_id'] = $price_supplier_item_id;

        return $this;
    }

    /**
     * Gets price_supplier_sku
     *
     * @return string
     */
    public function getPriceSupplierSku()
    {
        return $this->container['price_supplier_sku'];
    }

    /**
     * Sets price_supplier_sku
     *
     * @param string $price_supplier_sku Produktbezeichner des Lieferanten, der diese Bezugsquelle bereitgestellt hat
     *
     * @return $this
     */
    public function setPriceSupplierSku($price_supplier_sku)
    {
        $this->container['price_supplier_sku'] = $price_supplier_sku;

        return $this;
    }

    /**
     * Gets stock_supplier_text
     *
     * @return string
     */
    public function getStockSupplierText()
    {
        return $this->container['stock_supplier_text'];
    }

    /**
     * Sets stock_supplier_text
     *
     * @param string $stock_supplier_text Textuelle Bestandsinformation des Lieferanten, direkt übernommen, ohne Interpretation
     *
     * @return $this
     */
    public function setStockSupplierText($stock_supplier_text)
    {
        $this->container['stock_supplier_text'] = $stock_supplier_text;

        return $this;
    }

    /**
     * Gets stock_status
     *
     * @return int
     */
    public function getStockStatus()
    {
        return $this->container['stock_status'];
    }

    /**
     * Sets stock_status
     *
     * @param int $stock_status Numerischer Schlüssel des <a href=\"https://support.itscope.com/hc/de/articles/207168445\">Lieferstatus dieser Bestandsinformation</a>
     *
     * @return $this
     */
    public function setStockStatus($stock_status)
    {
        $this->container['stock_status'] = $stock_status;

        return $this;
    }

    /**
     * Gets stock_status_text
     *
     * @return string
     */
    public function getStockStatusText()
    {
        return $this->container['stock_status_text'];
    }

    /**
     * Sets stock_status_text
     *
     * @param string $stock_status_text <a href=\"https://support.itscope.com/hc/de/articles/207168445\">Lieferstatus dieser Bestandsinformation</a>, z.B. \"auf Lager\" oder \"im Außenlager\"
     *
     * @return $this
     */
    public function setStockStatusText($stock_status_text)
    {
        $this->container['stock_status_text'] = $stock_status_text;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock Bestandsmenge des in dieser Struktur angegebenen Lieferstatus
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets external_stock
     *
     * @return int
     */
    public function getExternalStock()
    {
        return $this->container['external_stock'];
    }

    /**
     * Sets external_stock
     *
     * @param int $external_stock Im Außenlager befindliche Bestandsmenge (Zusatzinformation einiger Lieferanten in Strukturen des Lieferstatus \"auf Lager\")
     *
     * @return $this
     */
    public function setExternalStock($external_stock)
    {
        $this->container['external_stock'] = $external_stock;

        return $this;
    }

    /**
     * Gets incoming_stock
     *
     * @return int
     */
    public function getIncomingStock()
    {
        return $this->container['incoming_stock'];
    }

    /**
     * Sets incoming_stock
     *
     * @param int $incoming_stock Im Zulauf befindliche Bestandsmenge  (Zusatzinformation einiger Lieferanten in Strukturen des Lieferstatus \"auf Lager\")
     *
     * @return $this
     */
    public function setIncomingStock($incoming_stock)
    {
        $this->container['incoming_stock'] = $incoming_stock;

        return $this;
    }

    /**
     * Gets stock_availability_date
     *
     * @return \DateTime
     */
    public function getStockAvailabilityDate()
    {
        return $this->container['stock_availability_date'];
    }

    /**
     * Sets stock_availability_date
     *
     * @param \DateTime $stock_availability_date Liefertermin für nicht auf Lager befindliche Ware
     *
     * @return $this
     */
    public function setStockAvailabilityDate($stock_availability_date)
    {
        $this->container['stock_availability_date'] = $stock_availability_date;

        return $this;
    }

    /**
     * Gets stock_last_update
     *
     * @return \DateTime
     */
    public function getStockLastUpdate()
    {
        return $this->container['stock_last_update'];
    }

    /**
     * Sets stock_last_update
     *
     * @param \DateTime $stock_last_update Zeitpunkt der letzten Aktualisierung der Bestandsinformation
     *
     * @return $this
     */
    public function setStockLastUpdate($stock_last_update)
    {
        $this->container['stock_last_update'] = $stock_last_update;

        return $this;
    }

    /**
     * Gets aggregated_status
     *
     * @return int
     */
    public function getAggregatedStatus()
    {
        return $this->container['aggregated_status'];
    }

    /**
     * Sets aggregated_status
     *
     * @param int $aggregated_status Bester Verfügbarkeitsstatus
     *
     * @return $this
     */
    public function setAggregatedStatus($aggregated_status)
    {
        $this->container['aggregated_status'] = $aggregated_status;

        return $this;
    }

    /**
     * Gets aggregated_status_text
     *
     * @return string
     */
    public function getAggregatedStatusText()
    {
        return $this->container['aggregated_status_text'];
    }

    /**
     * Sets aggregated_status_text
     *
     * @param string $aggregated_status_text Bester Verfügbarkeitsstatus
     *
     * @return $this
     */
    public function setAggregatedStatusText($aggregated_status_text)
    {
        if ((strlen($aggregated_status_text) > 20)) {
            throw new \InvalidArgumentException('invalid length for $aggregated_status_text when calling Product., must be smaller than or equal to 20.');
        }
        if ((strlen($aggregated_status_text) < 0)) {
            throw new \InvalidArgumentException('invalid length for $aggregated_status_text when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['aggregated_status_text'] = $aggregated_status_text;

        return $this;
    }

    /**
     * Gets aggregated_stock
     *
     * @return int
     */
    public function getAggregatedStock()
    {
        return $this->container['aggregated_stock'];
    }

    /**
     * Sets aggregated_stock
     *
     * @param int $aggregated_stock Summe aller Lagerbestände
     *
     * @return $this
     */
    public function setAggregatedStock($aggregated_stock)
    {
        $this->container['aggregated_stock'] = $aggregated_stock;

        return $this;
    }

    /**
     * Gets aggregated_supplier_items
     *
     * @return int
     */
    public function getAggregatedSupplierItems()
    {
        return $this->container['aggregated_supplier_items'];
    }

    /**
     * Sets aggregated_supplier_items
     *
     * @param int $aggregated_supplier_items Summe aller Distributoren zu diesem Produkt
     *
     * @return $this
     */
    public function setAggregatedSupplierItems($aggregated_supplier_items)
    {
        $this->container['aggregated_supplier_items'] = $aggregated_supplier_items;

        return $this;
    }

    /**
     * Gets supplier_item
     *
     * @return \Boracomputer\ITScope\Model\SupplierItem[]
     */
    public function getSupplierItem()
    {
        return $this->container['supplier_item'];
    }

    /**
     * Sets supplier_item
     *
     * @param \Boracomputer\ITScope\Model\SupplierItem[] $supplier_item Bezugsquelle eines ITscope-Produkts. Ein konkretes Angebot eines auf ITscope gelisteten Distributors.
     *
     * @return $this
     */
    public function setSupplierItem($supplier_item)
    {
        $this->container['supplier_item'] = $supplier_item;

        return $this;
    }

    /**
     * Gets attribute
     *
     * @return \Boracomputer\ITScope\Model\Attribute[]
     */
    public function getAttribute()
    {
        return $this->container['attribute'];
    }

    /**
     * Sets attribute
     *
     * @param \Boracomputer\ITScope\Model\Attribute[] $attribute Eigenschaften zu einem Produkt.
     *
     * @return $this
     */
    public function setAttribute($attribute)
    {
        $this->container['attribute'] = $attribute;

        return $this;
    }

    /**
     * Gets attribute_cluster
     *
     * @return \Boracomputer\ITScope\Model\AttributeCluster[]
     */
    public function getAttributeCluster()
    {
        return $this->container['attribute_cluster'];
    }

    /**
     * Sets attribute_cluster
     *
     * @param \Boracomputer\ITScope\Model\AttributeCluster[] $attribute_cluster Eigenschaftscluster, in denen das Produkt für Merkmalssuchen gefunden werden kann. Kann je nach Menge mehrere Eigenschaftsausprägungen in Intervallen zusammenfassen, z.B. 64-128MB RAM
     *
     * @return $this
     */
    public function setAttributeCluster($attribute_cluster)
    {
        $this->container['attribute_cluster'] = $attribute_cluster;

        return $this;
    }

    /**
     * Gets accessory
     *
     * @return \Boracomputer\ITScope\Model\Accessory[]
     */
    public function getAccessory()
    {
        return $this->container['accessory'];
    }

    /**
     * Sets accessory
     *
     * @param \Boracomputer\ITScope\Model\Accessory[] $accessory <a href=\"https://support.itscope.com/hc/de/articles/206032592\">Originalzubehör und kompatibles Zubehör</a> zu einem Produkt
     *
     * @return $this
     */
    public function setAccessory($accessory)
    {
        $this->container['accessory'] = $accessory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


