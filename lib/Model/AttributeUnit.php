<?php
/**
 * AttributeUnit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Model;

use \ArrayAccess;
use \Boracomputer\ITScope\ObjectSerializer;

/**
 * AttributeUnit Class Doc Comment
 *
 * @category Class
 * @description Einheiten aller konkreten Eigenschaftstypen.
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttributeUnit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'attributeUnit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'base_unit_id' => 'string',
        'mul_factor' => 'int',
        'div_factor' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'base_unit_id' => null,
        'mul_factor' => 'int64',
        'div_factor' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'base_unit_id' => 'baseUnitId',
        'mul_factor' => 'mulFactor',
        'div_factor' => 'divFactor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'base_unit_id' => 'setBaseUnitId',
        'mul_factor' => 'setMulFactor',
        'div_factor' => 'setDivFactor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'base_unit_id' => 'getBaseUnitId',
        'mul_factor' => 'getMulFactor',
        'div_factor' => 'getDivFactor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['base_unit_id'] = isset($data['base_unit_id']) ? $data['base_unit_id'] : null;
        $this->container['mul_factor'] = isset($data['mul_factor']) ? $data['mul_factor'] : null;
        $this->container['div_factor'] = isset($data['div_factor']) ? $data['div_factor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (strlen($this->container['id']) > 100)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['id']) && (strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['base_unit_id']) && (strlen($this->container['base_unit_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'base_unit_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['base_unit_id']) && (strlen($this->container['base_unit_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'base_unit_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['id']) > 100) {
            return false;
        }
        if (strlen($this->container['id']) < 0) {
            return false;
        }
        if (strlen($this->container['base_unit_id']) > 100) {
            return false;
        }
        if (strlen($this->container['base_unit_id']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Eindeutige Kennung einer Einheit
     *
     * @return $this
     */
    public function setId($id)
    {
        if (!is_null($id) && (strlen($id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $id when calling AttributeUnit., must be smaller than or equal to 100.');
        }
        if (!is_null($id) && (strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling AttributeUnit., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets base_unit_id
     *
     * @return string
     */
    public function getBaseUnitId()
    {
        return $this->container['base_unit_id'];
    }

    /**
     * Sets base_unit_id
     *
     * @param string $base_unit_id Die <a href=\"'https://support.itscope.com/hc/de/articles/211704489\">Basiseinheit</a> der Einheit
     *
     * @return $this
     */
    public function setBaseUnitId($base_unit_id)
    {
        if (!is_null($base_unit_id) && (strlen($base_unit_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $base_unit_id when calling AttributeUnit., must be smaller than or equal to 100.');
        }
        if (!is_null($base_unit_id) && (strlen($base_unit_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $base_unit_id when calling AttributeUnit., must be bigger than or equal to 0.');
        }

        $this->container['base_unit_id'] = $base_unit_id;

        return $this;
    }

    /**
     * Gets mul_factor
     *
     * @return int
     */
    public function getMulFactor()
    {
        return $this->container['mul_factor'];
    }

    /**
     * Sets mul_factor
     *
     * @param int $mul_factor Multiplikationsfaktor für die <a href=\"https://support.itscope.com/hc/de/articles/211715029\">Umrechnung</a> von Basiseinheit auf Einheit
     *
     * @return $this
     */
    public function setMulFactor($mul_factor)
    {
        $this->container['mul_factor'] = $mul_factor;

        return $this;
    }

    /**
     * Gets div_factor
     *
     * @return int
     */
    public function getDivFactor()
    {
        return $this->container['div_factor'];
    }

    /**
     * Sets div_factor
     *
     * @param int $div_factor Divisor für die <a href=\"https://support.itscope.com/hc/de/articles/211715029\">Umrechnung</a> von Basiseinheit auf Einheit
     *
     * @return $this
     */
    public function setDivFactor($div_factor)
    {
        $this->container['div_factor'] = $div_factor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


