<?php
/**
 * SupplierItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boracomputer\ITScope\Model;

use \ArrayAccess;
use \Boracomputer\ITScope\ObjectSerializer;

/**
 * SupplierItem Class Doc Comment
 *
 * @category Class
 * @description Bezugsquelle eines ITscope-Produkts. Ein konkretes Angebot eines auf ITscope gelisteten Distributors.
 * @package  Boracomputer\ITScope
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'supplierItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ean' => 'string',
        'manufacturer_sku' => 'string',
        'supplier_sku' => 'string',
        'supplier_id' => 'int',
        'supplier_name' => 'string',
        'manufacturer_name' => 'string',
        'product_name' => 'string',
        'long_description' => 'string',
        'condition_id' => 'int',
        'condition_name' => 'string',
        'eol_product' => 'bool',
        'match_quality' => 'int',
        'ean_valid' => 'bool',
        'special_offer' => 'bool',
        'promotion' => 'string',
        'vat' => 'int',
        'copyright_levy' => 'double',
        'customs_tariff_number' => 'string',
        'country_of_origin' => 'string',
        'gross_dim_x' => 'double',
        'gross_dim_y' => 'double',
        'gross_dim_z' => 'double',
        'warranty_text' => 'string',
        'deeplink' => 'string',
        'recommended_retail_price_net' => 'double',
        'price' => 'double',
        'price_calc' => 'double',
        'currency_code' => 'string',
        'price_calc_vat' => 'double',
        'price_last_update' => '\DateTime',
        'stock_supplier_text' => 'string',
        'stock_status' => 'int',
        'stock_status_text' => 'string',
        'stock' => 'int',
        'external_stock' => 'int',
        'incoming_stock' => 'int',
        'stock_availability_date' => '\DateTime',
        'last_stock_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'ean' => null,
        'manufacturer_sku' => null,
        'supplier_sku' => null,
        'supplier_id' => 'int64',
        'supplier_name' => null,
        'manufacturer_name' => null,
        'product_name' => null,
        'long_description' => null,
        'condition_id' => 'int32',
        'condition_name' => null,
        'eol_product' => null,
        'match_quality' => 'int32',
        'ean_valid' => null,
        'special_offer' => null,
        'promotion' => null,
        'vat' => 'int32',
        'copyright_levy' => 'double',
        'customs_tariff_number' => null,
        'country_of_origin' => null,
        'gross_dim_x' => 'double',
        'gross_dim_y' => 'double',
        'gross_dim_z' => 'double',
        'warranty_text' => null,
        'deeplink' => null,
        'recommended_retail_price_net' => 'double',
        'price' => 'double',
        'price_calc' => 'double',
        'currency_code' => null,
        'price_calc_vat' => 'double',
        'price_last_update' => 'date-time',
        'stock_supplier_text' => null,
        'stock_status' => 'int32',
        'stock_status_text' => null,
        'stock' => 'int32',
        'external_stock' => 'int32',
        'incoming_stock' => 'int32',
        'stock_availability_date' => 'date-time',
        'last_stock_update' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ean' => 'ean',
        'manufacturer_sku' => 'manufacturerSKU',
        'supplier_sku' => 'supplierSKU',
        'supplier_id' => 'supplierId',
        'supplier_name' => 'supplierName',
        'manufacturer_name' => 'manufacturerName',
        'product_name' => 'productName',
        'long_description' => 'longDescription',
        'condition_id' => 'conditionId',
        'condition_name' => 'conditionName',
        'eol_product' => 'eolProduct',
        'match_quality' => 'matchQuality',
        'ean_valid' => 'eanValid',
        'special_offer' => 'specialOffer',
        'promotion' => 'promotion',
        'vat' => 'vat',
        'copyright_levy' => 'copyrightLevy',
        'customs_tariff_number' => 'customsTariffNumber',
        'country_of_origin' => 'countryOfOrigin',
        'gross_dim_x' => 'grossDimX',
        'gross_dim_y' => 'grossDimY',
        'gross_dim_z' => 'grossDimZ',
        'warranty_text' => 'warrantyText',
        'deeplink' => 'deeplink',
        'recommended_retail_price_net' => 'recommendedRetailPriceNet',
        'price' => 'price',
        'price_calc' => 'priceCalc',
        'currency_code' => 'currencyCode',
        'price_calc_vat' => 'priceCalcVat',
        'price_last_update' => 'priceLastUpdate',
        'stock_supplier_text' => 'stockSupplierText',
        'stock_status' => 'stockStatus',
        'stock_status_text' => 'stockStatusText',
        'stock' => 'stock',
        'external_stock' => 'externalStock',
        'incoming_stock' => 'incomingStock',
        'stock_availability_date' => 'stockAvailabilityDate',
        'last_stock_update' => 'lastStockUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ean' => 'setEan',
        'manufacturer_sku' => 'setManufacturerSku',
        'supplier_sku' => 'setSupplierSku',
        'supplier_id' => 'setSupplierId',
        'supplier_name' => 'setSupplierName',
        'manufacturer_name' => 'setManufacturerName',
        'product_name' => 'setProductName',
        'long_description' => 'setLongDescription',
        'condition_id' => 'setConditionId',
        'condition_name' => 'setConditionName',
        'eol_product' => 'setEolProduct',
        'match_quality' => 'setMatchQuality',
        'ean_valid' => 'setEanValid',
        'special_offer' => 'setSpecialOffer',
        'promotion' => 'setPromotion',
        'vat' => 'setVat',
        'copyright_levy' => 'setCopyrightLevy',
        'customs_tariff_number' => 'setCustomsTariffNumber',
        'country_of_origin' => 'setCountryOfOrigin',
        'gross_dim_x' => 'setGrossDimX',
        'gross_dim_y' => 'setGrossDimY',
        'gross_dim_z' => 'setGrossDimZ',
        'warranty_text' => 'setWarrantyText',
        'deeplink' => 'setDeeplink',
        'recommended_retail_price_net' => 'setRecommendedRetailPriceNet',
        'price' => 'setPrice',
        'price_calc' => 'setPriceCalc',
        'currency_code' => 'setCurrencyCode',
        'price_calc_vat' => 'setPriceCalcVat',
        'price_last_update' => 'setPriceLastUpdate',
        'stock_supplier_text' => 'setStockSupplierText',
        'stock_status' => 'setStockStatus',
        'stock_status_text' => 'setStockStatusText',
        'stock' => 'setStock',
        'external_stock' => 'setExternalStock',
        'incoming_stock' => 'setIncomingStock',
        'stock_availability_date' => 'setStockAvailabilityDate',
        'last_stock_update' => 'setLastStockUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ean' => 'getEan',
        'manufacturer_sku' => 'getManufacturerSku',
        'supplier_sku' => 'getSupplierSku',
        'supplier_id' => 'getSupplierId',
        'supplier_name' => 'getSupplierName',
        'manufacturer_name' => 'getManufacturerName',
        'product_name' => 'getProductName',
        'long_description' => 'getLongDescription',
        'condition_id' => 'getConditionId',
        'condition_name' => 'getConditionName',
        'eol_product' => 'getEolProduct',
        'match_quality' => 'getMatchQuality',
        'ean_valid' => 'getEanValid',
        'special_offer' => 'getSpecialOffer',
        'promotion' => 'getPromotion',
        'vat' => 'getVat',
        'copyright_levy' => 'getCopyrightLevy',
        'customs_tariff_number' => 'getCustomsTariffNumber',
        'country_of_origin' => 'getCountryOfOrigin',
        'gross_dim_x' => 'getGrossDimX',
        'gross_dim_y' => 'getGrossDimY',
        'gross_dim_z' => 'getGrossDimZ',
        'warranty_text' => 'getWarrantyText',
        'deeplink' => 'getDeeplink',
        'recommended_retail_price_net' => 'getRecommendedRetailPriceNet',
        'price' => 'getPrice',
        'price_calc' => 'getPriceCalc',
        'currency_code' => 'getCurrencyCode',
        'price_calc_vat' => 'getPriceCalcVat',
        'price_last_update' => 'getPriceLastUpdate',
        'stock_supplier_text' => 'getStockSupplierText',
        'stock_status' => 'getStockStatus',
        'stock_status_text' => 'getStockStatusText',
        'stock' => 'getStock',
        'external_stock' => 'getExternalStock',
        'incoming_stock' => 'getIncomingStock',
        'stock_availability_date' => 'getStockAvailabilityDate',
        'last_stock_update' => 'getLastStockUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['manufacturer_sku'] = isset($data['manufacturer_sku']) ? $data['manufacturer_sku'] : null;
        $this->container['supplier_sku'] = isset($data['supplier_sku']) ? $data['supplier_sku'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['manufacturer_name'] = isset($data['manufacturer_name']) ? $data['manufacturer_name'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['condition_id'] = isset($data['condition_id']) ? $data['condition_id'] : null;
        $this->container['condition_name'] = isset($data['condition_name']) ? $data['condition_name'] : null;
        $this->container['eol_product'] = isset($data['eol_product']) ? $data['eol_product'] : null;
        $this->container['match_quality'] = isset($data['match_quality']) ? $data['match_quality'] : null;
        $this->container['ean_valid'] = isset($data['ean_valid']) ? $data['ean_valid'] : null;
        $this->container['special_offer'] = isset($data['special_offer']) ? $data['special_offer'] : null;
        $this->container['promotion'] = isset($data['promotion']) ? $data['promotion'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['copyright_levy'] = isset($data['copyright_levy']) ? $data['copyright_levy'] : null;
        $this->container['customs_tariff_number'] = isset($data['customs_tariff_number']) ? $data['customs_tariff_number'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
        $this->container['gross_dim_x'] = isset($data['gross_dim_x']) ? $data['gross_dim_x'] : null;
        $this->container['gross_dim_y'] = isset($data['gross_dim_y']) ? $data['gross_dim_y'] : null;
        $this->container['gross_dim_z'] = isset($data['gross_dim_z']) ? $data['gross_dim_z'] : null;
        $this->container['warranty_text'] = isset($data['warranty_text']) ? $data['warranty_text'] : null;
        $this->container['deeplink'] = isset($data['deeplink']) ? $data['deeplink'] : null;
        $this->container['recommended_retail_price_net'] = isset($data['recommended_retail_price_net']) ? $data['recommended_retail_price_net'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_calc'] = isset($data['price_calc']) ? $data['price_calc'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['price_calc_vat'] = isset($data['price_calc_vat']) ? $data['price_calc_vat'] : null;
        $this->container['price_last_update'] = isset($data['price_last_update']) ? $data['price_last_update'] : null;
        $this->container['stock_supplier_text'] = isset($data['stock_supplier_text']) ? $data['stock_supplier_text'] : null;
        $this->container['stock_status'] = isset($data['stock_status']) ? $data['stock_status'] : null;
        $this->container['stock_status_text'] = isset($data['stock_status_text']) ? $data['stock_status_text'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['external_stock'] = isset($data['external_stock']) ? $data['external_stock'] : null;
        $this->container['incoming_stock'] = isset($data['incoming_stock']) ? $data['incoming_stock'] : null;
        $this->container['stock_availability_date'] = isset($data['stock_availability_date']) ? $data['stock_availability_date'] : null;
        $this->container['last_stock_update'] = isset($data['last_stock_update']) ? $data['last_stock_update'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['ean']) && (strlen($this->container['ean']) > 18)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['ean']) && (strlen($this->container['ean']) < 0)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturer_sku']) && (strlen($this->container['manufacturer_sku']) > 40)) {
            $invalidProperties[] = "invalid value for 'manufacturer_sku', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['manufacturer_sku']) && (strlen($this->container['manufacturer_sku']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_sku', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['supplier_sku']) && (strlen($this->container['supplier_sku']) > 40)) {
            $invalidProperties[] = "invalid value for 'supplier_sku', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['supplier_sku']) && (strlen($this->container['supplier_sku']) < 0)) {
            $invalidProperties[] = "invalid value for 'supplier_sku', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['supplier_id'] === null) {
            $invalidProperties[] = "'supplier_id' can't be null";
        }
        if (!is_null($this->container['supplier_name']) && (strlen($this->container['supplier_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'supplier_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['supplier_name']) && (strlen($this->container['supplier_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'supplier_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturer_name']) && (strlen($this->container['manufacturer_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'manufacturer_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['manufacturer_name']) && (strlen($this->container['manufacturer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_name']) && (strlen($this->container['product_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'product_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['product_name']) && (strlen($this->container['product_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['long_description']) && (strlen($this->container['long_description']) > 60000)) {
            $invalidProperties[] = "invalid value for 'long_description', the character length must be smaller than or equal to 60000.";
        }

        if (!is_null($this->container['long_description']) && (strlen($this->container['long_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'long_description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['condition_id'] === null) {
            $invalidProperties[] = "'condition_id' can't be null";
        }
        if ($this->container['condition_name'] === null) {
            $invalidProperties[] = "'condition_name' can't be null";
        }
        if ((strlen($this->container['condition_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'condition_name', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['condition_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'condition_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['eol_product'] === null) {
            $invalidProperties[] = "'eol_product' can't be null";
        }
        if ($this->container['match_quality'] === null) {
            $invalidProperties[] = "'match_quality' can't be null";
        }
        if ($this->container['ean_valid'] === null) {
            $invalidProperties[] = "'ean_valid' can't be null";
        }
        if ($this->container['special_offer'] === null) {
            $invalidProperties[] = "'special_offer' can't be null";
        }
        if (!is_null($this->container['promotion']) && (strlen($this->container['promotion']) > 40)) {
            $invalidProperties[] = "invalid value for 'promotion', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['promotion']) && (strlen($this->container['promotion']) < 0)) {
            $invalidProperties[] = "invalid value for 'promotion', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customs_tariff_number']) && (strlen($this->container['customs_tariff_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'customs_tariff_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customs_tariff_number']) && (strlen($this->container['customs_tariff_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customs_tariff_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country_of_origin']) && (strlen($this->container['country_of_origin']) > 20)) {
            $invalidProperties[] = "invalid value for 'country_of_origin', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['country_of_origin']) && (strlen($this->container['country_of_origin']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_of_origin', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['warranty_text']) && (strlen($this->container['warranty_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'warranty_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['warranty_text']) && (strlen($this->container['warranty_text']) < 0)) {
            $invalidProperties[] = "invalid value for 'warranty_text', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['deeplink']) && (strlen($this->container['deeplink']) > 255)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['deeplink']) && (strlen($this->container['deeplink']) < 0)) {
            $invalidProperties[] = "invalid value for 'deeplink', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['stock_status_text']) && (strlen($this->container['stock_status_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'stock_status_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['stock_status_text']) && (strlen($this->container['stock_status_text']) < 0)) {
            $invalidProperties[] = "invalid value for 'stock_status_text', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if (strlen($this->container['ean']) > 18) {
            return false;
        }
        if (strlen($this->container['ean']) < 0) {
            return false;
        }
        if (strlen($this->container['manufacturer_sku']) > 40) {
            return false;
        }
        if (strlen($this->container['manufacturer_sku']) < 0) {
            return false;
        }
        if (strlen($this->container['supplier_sku']) > 40) {
            return false;
        }
        if (strlen($this->container['supplier_sku']) < 0) {
            return false;
        }
        if ($this->container['supplier_id'] === null) {
            return false;
        }
        if (strlen($this->container['supplier_name']) > 255) {
            return false;
        }
        if (strlen($this->container['supplier_name']) < 0) {
            return false;
        }
        if (strlen($this->container['manufacturer_name']) > 80) {
            return false;
        }
        if (strlen($this->container['manufacturer_name']) < 0) {
            return false;
        }
        if (strlen($this->container['product_name']) > 255) {
            return false;
        }
        if (strlen($this->container['product_name']) < 0) {
            return false;
        }
        if (strlen($this->container['long_description']) > 60000) {
            return false;
        }
        if (strlen($this->container['long_description']) < 0) {
            return false;
        }
        if ($this->container['condition_id'] === null) {
            return false;
        }
        if ($this->container['condition_name'] === null) {
            return false;
        }
        if (strlen($this->container['condition_name']) > 255) {
            return false;
        }
        if (strlen($this->container['condition_name']) < 0) {
            return false;
        }
        if ($this->container['eol_product'] === null) {
            return false;
        }
        if ($this->container['match_quality'] === null) {
            return false;
        }
        if ($this->container['ean_valid'] === null) {
            return false;
        }
        if ($this->container['special_offer'] === null) {
            return false;
        }
        if (strlen($this->container['promotion']) > 40) {
            return false;
        }
        if (strlen($this->container['promotion']) < 0) {
            return false;
        }
        if (strlen($this->container['customs_tariff_number']) > 50) {
            return false;
        }
        if (strlen($this->container['customs_tariff_number']) < 0) {
            return false;
        }
        if (strlen($this->container['country_of_origin']) > 20) {
            return false;
        }
        if (strlen($this->container['country_of_origin']) < 0) {
            return false;
        }
        if (strlen($this->container['warranty_text']) > 40) {
            return false;
        }
        if (strlen($this->container['warranty_text']) < 0) {
            return false;
        }
        if (strlen($this->container['deeplink']) > 255) {
            return false;
        }
        if (strlen($this->container['deeplink']) < 0) {
            return false;
        }
        if (strlen($this->container['stock_status_text']) > 255) {
            return false;
        }
        if (strlen($this->container['stock_status_text']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Eindeutiger Key
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean EAN-Angabe des Lieferanten
     *
     * @return $this
     */
    public function setEan($ean)
    {
        if (!is_null($ean) && (strlen($ean) > 18)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling SupplierItem., must be smaller than or equal to 18.');
        }
        if (!is_null($ean) && (strlen($ean) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets manufacturer_sku
     *
     * @return string
     */
    public function getManufacturerSku()
    {
        return $this->container['manufacturer_sku'];
    }

    /**
     * Sets manufacturer_sku
     *
     * @param string $manufacturer_sku Hersteller-Artikelnummer-Angabe des Lieferanten (muss nicht mit ITscope übereinstimmen)
     *
     * @return $this
     */
    public function setManufacturerSku($manufacturer_sku)
    {
        if (!is_null($manufacturer_sku) && (strlen($manufacturer_sku) > 40)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_sku when calling SupplierItem., must be smaller than or equal to 40.');
        }
        if (!is_null($manufacturer_sku) && (strlen($manufacturer_sku) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_sku when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_sku'] = $manufacturer_sku;

        return $this;
    }

    /**
     * Gets supplier_sku
     *
     * @return string
     */
    public function getSupplierSku()
    {
        return $this->container['supplier_sku'];
    }

    /**
     * Sets supplier_sku
     *
     * @param string $supplier_sku Produktnummer des Lieferanten
     *
     * @return $this
     */
    public function setSupplierSku($supplier_sku)
    {
        if (!is_null($supplier_sku) && (strlen($supplier_sku) > 40)) {
            throw new \InvalidArgumentException('invalid length for $supplier_sku when calling SupplierItem., must be smaller than or equal to 40.');
        }
        if (!is_null($supplier_sku) && (strlen($supplier_sku) < 0)) {
            throw new \InvalidArgumentException('invalid length for $supplier_sku when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['supplier_sku'] = $supplier_sku;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int $supplier_id Verweist 1:1 auf Supplier.id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name Name des Lieferanten
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        if (!is_null($supplier_name) && (strlen($supplier_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $supplier_name when calling SupplierItem., must be smaller than or equal to 255.');
        }
        if (!is_null($supplier_name) && (strlen($supplier_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $supplier_name when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets manufacturer_name
     *
     * @return string
     */
    public function getManufacturerName()
    {
        return $this->container['manufacturer_name'];
    }

    /**
     * Sets manufacturer_name
     *
     * @param string $manufacturer_name Herstellername wie beim Lieferant angegeben
     *
     * @return $this
     */
    public function setManufacturerName($manufacturer_name)
    {
        if (!is_null($manufacturer_name) && (strlen($manufacturer_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_name when calling SupplierItem., must be smaller than or equal to 80.');
        }
        if (!is_null($manufacturer_name) && (strlen($manufacturer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_name when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['manufacturer_name'] = $manufacturer_name;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name Genauer Bezeichner des Artikels, wie vom Lieferanten übermittelt
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        if (!is_null($product_name) && (strlen($product_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $product_name when calling SupplierItem., must be smaller than or equal to 255.');
        }
        if (!is_null($product_name) && (strlen($product_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_name when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description Erweiterte Artikelbeschreibung des Lieferanten
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        if (!is_null($long_description) && (strlen($long_description) > 60000)) {
            throw new \InvalidArgumentException('invalid length for $long_description when calling SupplierItem., must be smaller than or equal to 60000.');
        }
        if (!is_null($long_description) && (strlen($long_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $long_description when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return int
     */
    public function getConditionId()
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param int $condition_id Numerischer Code des <a href=\"https://support.itscope.com/hc/de/articles/207167615\">Zustand des Artikels</a>
     *
     * @return $this
     */
    public function setConditionId($condition_id)
    {
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets condition_name
     *
     * @return string
     */
    public function getConditionName()
    {
        return $this->container['condition_name'];
    }

    /**
     * Sets condition_name
     *
     * @param string $condition_name <a href=\"https://support.itscope.com/hc/de/articles/207167615\">Zustand des Artikels</a> (neu, gebraucht, B-Ware, Refurbished, usw.)
     *
     * @return $this
     */
    public function setConditionName($condition_name)
    {
        if ((strlen($condition_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $condition_name when calling SupplierItem., must be smaller than or equal to 255.');
        }
        if ((strlen($condition_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $condition_name when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['condition_name'] = $condition_name;

        return $this;
    }

    /**
     * Gets eol_product
     *
     * @return bool
     */
    public function getEolProduct()
    {
        return $this->container['eol_product'];
    }

    /**
     * Sets eol_product
     *
     * @param bool $eol_product Kennung: Auslaufartikel
     *
     * @return $this
     */
    public function setEolProduct($eol_product)
    {
        $this->container['eol_product'] = $eol_product;

        return $this;
    }

    /**
     * Gets match_quality
     *
     * @return int
     */
    public function getMatchQuality()
    {
        return $this->container['match_quality'];
    }

    /**
     * Sets match_quality
     *
     * @param int $match_quality <a href=\"https://support.itscope.com/hc/de/articles/206175301\">Zuordnungsqualität</a> des Artikels zum ITscope-Produktkatalog
     *
     * @return $this
     */
    public function setMatchQuality($match_quality)
    {
        $this->container['match_quality'] = $match_quality;

        return $this;
    }

    /**
     * Gets ean_valid
     *
     * @return bool
     */
    public function getEanValid()
    {
        return $this->container['ean_valid'];
    }

    /**
     * Sets ean_valid
     *
     * @param bool $ean_valid Flag, ob die EAN des Lieferanten valide nach den EAN-Kriterien ist
     *
     * @return $this
     */
    public function setEanValid($ean_valid)
    {
        $this->container['ean_valid'] = $ean_valid;

        return $this;
    }

    /**
     * Gets special_offer
     *
     * @return bool
     */
    public function getSpecialOffer()
    {
        return $this->container['special_offer'];
    }

    /**
     * Sets special_offer
     *
     * @param bool $special_offer Flag, ob Artikel Sonderangebot ist
     *
     * @return $this
     */
    public function setSpecialOffer($special_offer)
    {
        $this->container['special_offer'] = $special_offer;

        return $this;
    }

    /**
     * Gets promotion
     *
     * @return string
     */
    public function getPromotion()
    {
        return $this->container['promotion'];
    }

    /**
     * Sets promotion
     *
     * @param string $promotion Name der Promo-Aktion des Lieferanten
     *
     * @return $this
     */
    public function setPromotion($promotion)
    {
        if (!is_null($promotion) && (strlen($promotion) > 40)) {
            throw new \InvalidArgumentException('invalid length for $promotion when calling SupplierItem., must be smaller than or equal to 40.');
        }
        if (!is_null($promotion) && (strlen($promotion) < 0)) {
            throw new \InvalidArgumentException('invalid length for $promotion when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['promotion'] = $promotion;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return int
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param int $vat MwSt-Satz für den Artikel
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets copyright_levy
     *
     * @return double
     */
    public function getCopyrightLevy()
    {
        return $this->container['copyright_levy'];
    }

    /**
     * Sets copyright_levy
     *
     * @param double $copyright_levy Urheberrechtsabgabe
     *
     * @return $this
     */
    public function setCopyrightLevy($copyright_levy)
    {
        $this->container['copyright_levy'] = $copyright_levy;

        return $this;
    }

    /**
     * Gets customs_tariff_number
     *
     * @return string
     */
    public function getCustomsTariffNumber()
    {
        return $this->container['customs_tariff_number'];
    }

    /**
     * Sets customs_tariff_number
     *
     * @param string $customs_tariff_number Zolltarifnummer
     *
     * @return $this
     */
    public function setCustomsTariffNumber($customs_tariff_number)
    {
        if (!is_null($customs_tariff_number) && (strlen($customs_tariff_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customs_tariff_number when calling SupplierItem., must be smaller than or equal to 50.');
        }
        if (!is_null($customs_tariff_number) && (strlen($customs_tariff_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customs_tariff_number when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['customs_tariff_number'] = $customs_tariff_number;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string $country_of_origin Ursprungsland des Artikels
     *
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        if (!is_null($country_of_origin) && (strlen($country_of_origin) > 20)) {
            throw new \InvalidArgumentException('invalid length for $country_of_origin when calling SupplierItem., must be smaller than or equal to 20.');
        }
        if (!is_null($country_of_origin) && (strlen($country_of_origin) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_of_origin when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets gross_dim_x
     *
     * @return double
     */
    public function getGrossDimX()
    {
        return $this->container['gross_dim_x'];
    }

    /**
     * Sets gross_dim_x
     *
     * @param double $gross_dim_x LÄnge des Produkts inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimX($gross_dim_x)
    {
        $this->container['gross_dim_x'] = $gross_dim_x;

        return $this;
    }

    /**
     * Gets gross_dim_y
     *
     * @return double
     */
    public function getGrossDimY()
    {
        return $this->container['gross_dim_y'];
    }

    /**
     * Sets gross_dim_y
     *
     * @param double $gross_dim_y Höhe des Produks inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimY($gross_dim_y)
    {
        $this->container['gross_dim_y'] = $gross_dim_y;

        return $this;
    }

    /**
     * Gets gross_dim_z
     *
     * @return double
     */
    public function getGrossDimZ()
    {
        return $this->container['gross_dim_z'];
    }

    /**
     * Sets gross_dim_z
     *
     * @param double $gross_dim_z Breite des Produkts inklusive Maßeinheit
     *
     * @return $this
     */
    public function setGrossDimZ($gross_dim_z)
    {
        $this->container['gross_dim_z'] = $gross_dim_z;

        return $this;
    }

    /**
     * Gets warranty_text
     *
     * @return string
     */
    public function getWarrantyText()
    {
        return $this->container['warranty_text'];
    }

    /**
     * Sets warranty_text
     *
     * @param string $warranty_text Garantieangaben des Lieferanten
     *
     * @return $this
     */
    public function setWarrantyText($warranty_text)
    {
        if (!is_null($warranty_text) && (strlen($warranty_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $warranty_text when calling SupplierItem., must be smaller than or equal to 40.');
        }
        if (!is_null($warranty_text) && (strlen($warranty_text) < 0)) {
            throw new \InvalidArgumentException('invalid length for $warranty_text when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['warranty_text'] = $warranty_text;

        return $this;
    }

    /**
     * Gets deeplink
     *
     * @return string
     */
    public function getDeeplink()
    {
        return $this->container['deeplink'];
    }

    /**
     * Sets deeplink
     *
     * @param string $deeplink Link zum Artikel beim Lieferanten
     *
     * @return $this
     */
    public function setDeeplink($deeplink)
    {
        if (!is_null($deeplink) && (strlen($deeplink) > 255)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling SupplierItem., must be smaller than or equal to 255.');
        }
        if (!is_null($deeplink) && (strlen($deeplink) < 0)) {
            throw new \InvalidArgumentException('invalid length for $deeplink when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['deeplink'] = $deeplink;

        return $this;
    }

    /**
     * Gets recommended_retail_price_net
     *
     * @return double
     */
    public function getRecommendedRetailPriceNet()
    {
        return $this->container['recommended_retail_price_net'];
    }

    /**
     * Sets recommended_retail_price_net
     *
     * @param double $recommended_retail_price_net UVP-Angabe des Lieferanten
     *
     * @return $this
     */
    public function setRecommendedRetailPriceNet($recommended_retail_price_net)
    {
        $this->container['recommended_retail_price_net'] = $recommended_retail_price_net;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Preis
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_calc
     *
     * @return double
     */
    public function getPriceCalc()
    {
        return $this->container['price_calc'];
    }

    /**
     * Sets price_calc
     *
     * @param double $price_calc Kalkulierter Preis, auf Grundlage der individuellen <a href=\"https://support.itscope.com/hc/de/sections/201887801\">Preiskalkulation</a>
     *
     * @return $this
     */
    public function setPriceCalc($price_calc)
    {
        $this->container['price_calc'] = $price_calc;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Währungseinheit, die für diese Preisinformation gilt
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets price_calc_vat
     *
     * @return double
     */
    public function getPriceCalcVat()
    {
        return $this->container['price_calc_vat'];
    }

    /**
     * Sets price_calc_vat
     *
     * @param double $price_calc_vat Umsatzsteuersatz, der zur Berechnung des <a href=\"https://support.itscope.com/hc/de/articles/206156619\">kalkulierten Preises</a> benutzt wurde
     *
     * @return $this
     */
    public function setPriceCalcVat($price_calc_vat)
    {
        $this->container['price_calc_vat'] = $price_calc_vat;

        return $this;
    }

    /**
     * Gets price_last_update
     *
     * @return \DateTime
     */
    public function getPriceLastUpdate()
    {
        return $this->container['price_last_update'];
    }

    /**
     * Sets price_last_update
     *
     * @param \DateTime $price_last_update Zeitpunkt der letzten Aktualisierungs der Preisinformation
     *
     * @return $this
     */
    public function setPriceLastUpdate($price_last_update)
    {
        $this->container['price_last_update'] = $price_last_update;

        return $this;
    }

    /**
     * Gets stock_supplier_text
     *
     * @return string
     */
    public function getStockSupplierText()
    {
        return $this->container['stock_supplier_text'];
    }

    /**
     * Sets stock_supplier_text
     *
     * @param string $stock_supplier_text Bestandsinformation zur Bezugsquelle, wie vom Lieferanten übermittelt
     *
     * @return $this
     */
    public function setStockSupplierText($stock_supplier_text)
    {
        $this->container['stock_supplier_text'] = $stock_supplier_text;

        return $this;
    }

    /**
     * Gets stock_status
     *
     * @return int
     */
    public function getStockStatus()
    {
        return $this->container['stock_status'];
    }

    /**
     * Sets stock_status
     *
     * @param int $stock_status Numerischer Schlüssel des <a href=\"https://support.itscope.com/hc/de/articles/207168445\">Lieferstatus dieser Bestandsinformation</a>
     *
     * @return $this
     */
    public function setStockStatus($stock_status)
    {
        $this->container['stock_status'] = $stock_status;

        return $this;
    }

    /**
     * Gets stock_status_text
     *
     * @return string
     */
    public function getStockStatusText()
    {
        return $this->container['stock_status_text'];
    }

    /**
     * Sets stock_status_text
     *
     * @param string $stock_status_text <a href=\"https://support.itscope.com/hc/de/articles/207168445\">Lieferstatus dieser Bestandsinformation</a>, z.B. \"auf Lager\" oder \"im Außenlager\"
     *
     * @return $this
     */
    public function setStockStatusText($stock_status_text)
    {
        if (!is_null($stock_status_text) && (strlen($stock_status_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $stock_status_text when calling SupplierItem., must be smaller than or equal to 255.');
        }
        if (!is_null($stock_status_text) && (strlen($stock_status_text) < 0)) {
            throw new \InvalidArgumentException('invalid length for $stock_status_text when calling SupplierItem., must be bigger than or equal to 0.');
        }

        $this->container['stock_status_text'] = $stock_status_text;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock Bestandsmenge
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets external_stock
     *
     * @return int
     */
    public function getExternalStock()
    {
        return $this->container['external_stock'];
    }

    /**
     * Sets external_stock
     *
     * @param int $external_stock Im Außenlager befindliche Bestandsmenge (Zusatzinformation einiger Lieferanten in Strukturen des Lieferstatus \"auf Lager\")
     *
     * @return $this
     */
    public function setExternalStock($external_stock)
    {
        $this->container['external_stock'] = $external_stock;

        return $this;
    }

    /**
     * Gets incoming_stock
     *
     * @return int
     */
    public function getIncomingStock()
    {
        return $this->container['incoming_stock'];
    }

    /**
     * Sets incoming_stock
     *
     * @param int $incoming_stock Im Zulauf befindliche Bestandsmenge  (Zusatzinformation einiger Lieferanten in Strukturen des Lieferstatus \"auf Lager\")
     *
     * @return $this
     */
    public function setIncomingStock($incoming_stock)
    {
        $this->container['incoming_stock'] = $incoming_stock;

        return $this;
    }

    /**
     * Gets stock_availability_date
     *
     * @return \DateTime
     */
    public function getStockAvailabilityDate()
    {
        return $this->container['stock_availability_date'];
    }

    /**
     * Sets stock_availability_date
     *
     * @param \DateTime $stock_availability_date Liefertermin für nicht auf Lager befindliche Ware
     *
     * @return $this
     */
    public function setStockAvailabilityDate($stock_availability_date)
    {
        $this->container['stock_availability_date'] = $stock_availability_date;

        return $this;
    }

    /**
     * Gets last_stock_update
     *
     * @return \DateTime
     */
    public function getLastStockUpdate()
    {
        return $this->container['last_stock_update'];
    }

    /**
     * Sets last_stock_update
     *
     * @param \DateTime $last_stock_update Zeitpunkt der letzten Aktualisierung der Bestandsinformation
     *
     * @return $this
     */
    public function setLastStockUpdate($last_stock_update)
    {
        $this->container['last_stock_update'] = $last_stock_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


