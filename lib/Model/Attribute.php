<?php
/**
 * Attribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ITscope - Interactive API V20
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@itscope.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Attribute Class Doc Comment
 *
 * @category Class
 * @description Eigenschaften zu einem Produkt.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Attribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'attribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_value' => 'string',
        'attribute_type_id' => 'int',
        'attribute_type_name' => 'string',
        'attribute_type_rank' => 'int',
        'attribute_type_group_id' => 'int',
        'attribute_type_group_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_value' => null,
        'attribute_type_id' => 'int64',
        'attribute_type_name' => null,
        'attribute_type_rank' => 'int64',
        'attribute_type_group_id' => 'int64',
        'attribute_type_group_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_value' => 'displayValue',
        'attribute_type_id' => 'attributeTypeId',
        'attribute_type_name' => 'attributeTypeName',
        'attribute_type_rank' => 'attributeTypeRank',
        'attribute_type_group_id' => 'attributeTypeGroupId',
        'attribute_type_group_name' => 'attributeTypeGroupName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_value' => 'setDisplayValue',
        'attribute_type_id' => 'setAttributeTypeId',
        'attribute_type_name' => 'setAttributeTypeName',
        'attribute_type_rank' => 'setAttributeTypeRank',
        'attribute_type_group_id' => 'setAttributeTypeGroupId',
        'attribute_type_group_name' => 'setAttributeTypeGroupName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_value' => 'getDisplayValue',
        'attribute_type_id' => 'getAttributeTypeId',
        'attribute_type_name' => 'getAttributeTypeName',
        'attribute_type_rank' => 'getAttributeTypeRank',
        'attribute_type_group_id' => 'getAttributeTypeGroupId',
        'attribute_type_group_name' => 'getAttributeTypeGroupName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_value'] = isset($data['display_value']) ? $data['display_value'] : null;
        $this->container['attribute_type_id'] = isset($data['attribute_type_id']) ? $data['attribute_type_id'] : null;
        $this->container['attribute_type_name'] = isset($data['attribute_type_name']) ? $data['attribute_type_name'] : null;
        $this->container['attribute_type_rank'] = isset($data['attribute_type_rank']) ? $data['attribute_type_rank'] : null;
        $this->container['attribute_type_group_id'] = isset($data['attribute_type_group_id']) ? $data['attribute_type_group_id'] : null;
        $this->container['attribute_type_group_name'] = isset($data['attribute_type_group_name']) ? $data['attribute_type_group_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['display_value']) && (strlen($this->container['display_value']) > 1024)) {
            $invalidProperties[] = "invalid value for 'display_value', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['display_value']) && (strlen($this->container['display_value']) < 0)) {
            $invalidProperties[] = "invalid value for 'display_value', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_name']) && (strlen($this->container['attribute_type_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_name']) && (strlen($this->container['attribute_type_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attribute_type_group_name']) && (strlen($this->container['attribute_type_group_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'attribute_type_group_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['attribute_type_group_name']) && (strlen($this->container['attribute_type_group_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'attribute_type_group_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['display_value']) > 1024) {
            return false;
        }
        if (strlen($this->container['display_value']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_name']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_name']) < 0) {
            return false;
        }
        if (strlen($this->container['attribute_type_group_name']) > 255) {
            return false;
        }
        if (strlen($this->container['attribute_type_group_name']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets display_value
     *
     * @return string
     */
    public function getDisplayValue()
    {
        return $this->container['display_value'];
    }

    /**
     * Sets display_value
     *
     * @param string $display_value Der lesbare Wert der Eigenschaft, inklusive Einheit
     *
     * @return $this
     */
    public function setDisplayValue($display_value)
    {
        if (!is_null($display_value) && (strlen($display_value) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $display_value when calling Attribute., must be smaller than or equal to 1024.');
        }
        if (!is_null($display_value) && (strlen($display_value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $display_value when calling Attribute., must be bigger than or equal to 0.');
        }

        $this->container['display_value'] = $display_value;

        return $this;
    }

    /**
     * Gets attribute_type_id
     *
     * @return int
     */
    public function getAttributeTypeId()
    {
        return $this->container['attribute_type_id'];
    }

    /**
     * Sets attribute_type_id
     *
     * @param int $attribute_type_id Eindeutige Kennung eines konkreten Eigenschafttyps
     *
     * @return $this
     */
    public function setAttributeTypeId($attribute_type_id)
    {
        $this->container['attribute_type_id'] = $attribute_type_id;

        return $this;
    }

    /**
     * Gets attribute_type_name
     *
     * @return string
     */
    public function getAttributeTypeName()
    {
        return $this->container['attribute_type_name'];
    }

    /**
     * Sets attribute_type_name
     *
     * @param string $attribute_type_name Name des konkreten Eigenschafttyps
     *
     * @return $this
     */
    public function setAttributeTypeName($attribute_type_name)
    {
        if (!is_null($attribute_type_name) && (strlen($attribute_type_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name when calling Attribute., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_name) && (strlen($attribute_type_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_name when calling Attribute., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_name'] = $attribute_type_name;

        return $this;
    }

    /**
     * Gets attribute_type_rank
     *
     * @return int
     */
    public function getAttributeTypeRank()
    {
        return $this->container['attribute_type_rank'];
    }

    /**
     * Sets attribute_type_rank
     *
     * @param int $attribute_type_rank Ranking des Eigenschafttyps, kann z.B. zur Sortierung verwendet werden
     *
     * @return $this
     */
    public function setAttributeTypeRank($attribute_type_rank)
    {
        $this->container['attribute_type_rank'] = $attribute_type_rank;

        return $this;
    }

    /**
     * Gets attribute_type_group_id
     *
     * @return int
     */
    public function getAttributeTypeGroupId()
    {
        return $this->container['attribute_type_group_id'];
    }

    /**
     * Sets attribute_type_group_id
     *
     * @param int $attribute_type_group_id Kennung einer Eigenschaftsgruppe, kein Tabellenverweis, sondern identifiziert attributeTypeGroupName eindeutig
     *
     * @return $this
     */
    public function setAttributeTypeGroupId($attribute_type_group_id)
    {
        $this->container['attribute_type_group_id'] = $attribute_type_group_id;

        return $this;
    }

    /**
     * Gets attribute_type_group_name
     *
     * @return string
     */
    public function getAttributeTypeGroupName()
    {
        return $this->container['attribute_type_group_name'];
    }

    /**
     * Sets attribute_type_group_name
     *
     * @param string $attribute_type_group_name Name der Eigenschaftsgruppe
     *
     * @return $this
     */
    public function setAttributeTypeGroupName($attribute_type_group_name)
    {
        if (!is_null($attribute_type_group_name) && (strlen($attribute_type_group_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_group_name when calling Attribute., must be smaller than or equal to 255.');
        }
        if (!is_null($attribute_type_group_name) && (strlen($attribute_type_group_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attribute_type_group_name when calling Attribute., must be bigger than or equal to 0.');
        }

        $this->container['attribute_type_group_name'] = $attribute_type_group_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


